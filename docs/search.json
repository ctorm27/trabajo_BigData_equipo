[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EL GRUPO DE 2",
    "section": "",
    "text": "Hola, somos Manu y Cristy.\nEsta web sirve para presentar el trabajo en equipo de la asignatura “Programación y manejo de datos en la era del Big Data”, optativa de GECO en la Facultad de Economía de la Universitat de València.\nPuedes encontrar la web de la asignatura aquí y los trabajos de mis compañeros de curso puedes verlos aquí.\nNuestro trabajo se titula “Hits Spotify 2023 y el caso de Feid”. El objetivo es extraer conclusiones sobre los temas más escuchados utilizando datos de Spotify y otras plataformas. Analizaremos variables como la bailabilidad, la energía, la valentía, entre otras, y su relación con el éxito durante el año 2023. Además, nos sumergiremos en el comportamiento detallado de las canciones de un solo artista, Feid."
  },
  {
    "objectID": "my_trabajo_BigData.html",
    "href": "my_trabajo_BigData.html",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "",
    "text": "El siguiente trabajo está dividido en dos partes. En primer lugar, llevamos a cabo un análisis exhaustivo de las tendencias en la música popular de 2023 con datos extraídos directamente de Spotify. El enfoque particular de este estudio surge de variables que caracterizan las canciones más populares, como la “bailabilidad”, “energía” y “valentía”. Además, se trata de establecer una relación entre dichas variables y la popularidad de las canciones en diferentes plataformas, como la propia Spotify, Apple Music y Deezer. Utilizando una combinación de técnicas estadísticas y visualizaciones avanzadas, buscamos descubrir patrones y relaciones clave entre estas características musicales y métricas de éxito.\nEn la segunda parte, nos centramos en el artista Feid y el trabajo adquiere un enfoque concreto que no solo se dirige hacia la popularidad y distribución de las canciones de Feid en las plataformas de streaming musical, sino que también nos permite explorar las características musicales de sus canciones y su relación con otros artistas.\nEl objetivo del trabajo es ver a nivel global y a nivel particular qué comportamiento experimentan las canciones, qué coincidencias se encuentran a nivel de popularidad y qué tendencias se aprecian.\nLos datos se pueden cargar en la memoria de R/RStudio con este código:\n\n\nCódigo\n#Cargamos librerías necesarias\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(corrplot)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(cluster)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(gridExtra)\nlibrary(fmsb)\nlibrary(radarchart)\nlibrary(gganimate)\nlibrary(ggwordcloud)\nlibrary(png)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(\"vembedr\")\n\n\n#Cargamos los datos desde el archivo CSV\nfile_path &lt;- \"datos/spotify-2023.csv\"\ndf &lt;- read.csv(file_path, stringsAsFactors = FALSE)\n\n#Preparamos los datos: Limpieza y conversión de tipos de datos\ndf$streams &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$streams))\ndf$in_deezer_playlists &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$in_deezer_playlists))\ndf$in_shazam_charts &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$in_shazam_charts))\ndf$track_name_clean &lt;- iconv(df$track_name, to = \"ASCII\", sub = \"\")\ndf$artist.s._name &lt;- iconv(df$artist.s._name, to = \"UTF-8\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#intro",
    "href": "my_trabajo_BigData.html#intro",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "",
    "text": "Vamos a utilizar datos del paquete palmerpenguins. El repo del paquete en CRAN está aquí, el repo de Github está aquí y la página web del paquete está aquí.\nLos datos se pueden cargar en la memoria de de R/RStudio de esta forma:\n\n\nCódigo\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\ndf &lt;- palmerpenguins::penguins\n\n\nEl dataset contiene observaciones sobre un conjunto de 344 pingüinos de 3 especies. Hay 8 variables."
  },
  {
    "objectID": "my_trabajo_BigData.html#los-pingüinos-molan",
    "href": "my_trabajo_BigData.html#los-pingüinos-molan",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Los pingüinos molan",
    "text": "Los pingüinos molan\nVamos a ver una foto de un pingüinos\n\n\n\nUn pingüino chulo\n\n\n\nSí, lo pingüinos molan, así que vamos a poner otra foto de pingüinos que tenemos en nuestro PC pero la vamos a poner en el margen:"
  },
  {
    "objectID": "my_trabajo_BigData.html#algunos-gráficos",
    "href": "my_trabajo_BigData.html#algunos-gráficos",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Algunos gráficos",
    "text": "Algunos gráficos\nBueno pues vamos a hacer algún gráfico, pero claro antes he de cargar los paquetes\n\n\nCódigo\nlibrary(tidyverse)\n\n\nArreglo los datos\n\n\nCódigo\n#- cojos datos de pingüinos y arreglo un poco \ndf &lt;- palmerpenguins::penguins %&gt;% \n  dplyr::select(species, bill_depth_mm, body_mass_g) %&gt;% \n  tidyr::drop_na()\n\n\n\n\nPrimer gráfico\n\n\nCódigo\n#- primer gráfico\np &lt;- ggplot(data = df, \n       mapping = aes(x = bill_depth_mm, y = body_mass_g, color = species)) +\n     geom_point()\np\n\n\n\n\n\n\n\n\n\n\n\n\nSegundo\n\n\nCódigo\n#- segundo gráfico\np &lt;- p + geom_smooth(method = \"lm\", se = FALSE) \n\np\n\n\n\n\n\n\n\n\n\n\n\n\nEl último\n\n\nCódigo\n#- tercer gráfico\np + geom_smooth(method = \"lm\", se = FALSE, color = \"black\") \n\n\n\n\n\n\n\n\n\n\nCon esto acabo mi trabajo para BigData!!\n\n\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n\n\n current session info \n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Madrid\n date     2023-12-14\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version    date (UTC) lib source\n cli              3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n clipr            0.8.0      2022-02-22 [1] CRAN (R 4.3.0)\n cluster        * 2.1.4      2022-08-22 [1] CRAN (R 4.3.1)\n colorspace       2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n corrplot       * 0.92       2021-11-18 [1] CRAN (R 4.3.0)\n crayon           1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n data.table       1.14.8     2023-02-17 [1] CRAN (R 4.3.0)\n desc             1.4.2      2022-09-08 [1] CRAN (R 4.3.0)\n details          0.3.0      2022-03-27 [1] CRAN (R 4.3.0)\n digest           0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n dplyr          * 1.1.3.9000 2023-11-11 [1] Github (tidyverse/dplyr@6b5aa31)\n evaluate         0.21       2023-05-05 [1] CRAN (R 4.3.0)\n fansi            1.0.5      2023-10-08 [1] CRAN (R 4.3.1)\n farver           2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastmap          1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fmsb           * 0.7.5      2023-01-05 [1] CRAN (R 4.3.0)\n fontawesome      0.5.2      2023-08-19 [1] CRAN (R 4.3.0)\n forcats        * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n generics         0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n gganimate      * 1.0.8      2022-09-08 [1] CRAN (R 4.3.0)\n ggplot2        * 3.4.3      2023-08-14 [1] CRAN (R 4.3.0)\n ggrepel        * 0.9.4      2023-10-13 [1] CRAN (R 4.3.1)\n ggwordcloud    * 0.6.1      2023-10-26 [1] CRAN (R 4.3.1)\n glue             1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra      * 2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridtext         0.1.5      2022-09-16 [1] CRAN (R 4.3.0)\n gt             * 0.9.0      2023-03-31 [1] CRAN (R 4.3.0)\n gtable           0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n gtExtras       * 0.5.0      2023-09-15 [1] CRAN (R 4.3.0)\n hms              1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools        0.5.6      2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets      1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httr             1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n jsonlite         1.8.7      2023-06-29 [1] CRAN (R 4.3.0)\n knitr            1.43       2023-05-25 [1] CRAN (R 4.3.0)\n labeling         0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n lattice          0.21-8     2023-04-05 [1] CRAN (R 4.3.1)\n lazyeval         0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle        1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate      * 1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magick           2.8.1      2023-10-22 [1] CRAN (R 4.3.1)\n magrittr         2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n Matrix           1.6-1.1    2023-09-18 [1] CRAN (R 4.3.1)\n mgcv             1.8-42     2023-03-02 [1] CRAN (R 4.3.1)\n munsell          0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n nlme             3.1-162    2023-01-31 [1] CRAN (R 4.3.1)\n paletteer        1.5.0      2022-10-19 [1] CRAN (R 4.3.0)\n palmerpenguins   0.1.1      2022-08-15 [1] CRAN (R 4.3.0)\n pillar           1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig        2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n plotly         * 4.10.2     2023-06-03 [1] CRAN (R 4.3.0)\n plyr             1.8.8      2022-11-11 [1] CRAN (R 4.3.0)\n png            * 0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits      1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n progress         1.2.2      2019-05-16 [1] CRAN (R 4.3.0)\n purrr          * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6               2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n radarchart     * 0.3.1      2016-12-20 [1] CRAN (R 4.3.0)\n Rcpp             1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n readr          * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n rematch2         2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n reshape2       * 1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rlang            1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown        2.24       2023-08-14 [1] CRAN (R 4.3.0)\n rprojroot        2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi       0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n scales           1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo      1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n stringi          1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr        * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble         * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr          * 1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect       1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse      * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange       0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tweenr           2.0.2      2022-09-06 [1] CRAN (R 4.3.0)\n tzdb             0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n utf8             1.2.4      2023-10-22 [1] CRAN (R 4.3.1)\n vctrs            0.6.4      2023-10-12 [1] CRAN (R 4.3.1)\n viridisLite      0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n withr            2.5.2      2023-10-30 [1] CRAN (R 4.3.1)\n xfun             0.40       2023-08-09 [1] CRAN (R 4.3.0)\n xml2             1.3.5      2023-07-06 [1] CRAN (R 4.3.0)\n yaml             2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_slides_BigData.html#intro",
    "href": "my_slides_BigData.html#intro",
    "title": "Los pingüinos molan",
    "section": "Intro",
    "text": "Intro\nVamos a utilizar datos del paquete palmerpenguins. El repo del paquete en CRAN está aquí, el repo de Github está aquí y la página web del paquete está aquí.\nLos datos se pueden cargar en la memoria de de R/RStudio de esta forma:\n\n# install.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\ndf &lt;- palmerpenguins::penguins\n\nEl dataset contiene observaciones sobre un conjunto de 344 pingüinos de 3 especies. Hay 8 variables."
  },
  {
    "objectID": "my_slides_BigData.html#los-pingüinos-molan",
    "href": "my_slides_BigData.html#los-pingüinos-molan",
    "title": "Los pingüinos molan",
    "section": "Los pingüinos molan",
    "text": "Los pingüinos molan\nVamos a ver una foto de un pingüinos\n\nUn pingüino chulo"
  },
  {
    "objectID": "my_slides_BigData.html#algunos-gráficos",
    "href": "my_slides_BigData.html#algunos-gráficos",
    "title": "Los pingüinos molan",
    "section": "Algunos gráficos",
    "text": "Algunos gráficos\nBueno pues vamos a hacer algún gráfico, pero claro antes he de cargar los paquetes\n\nlibrary(tidyverse)\n\nArreglo los datos\n\n#- cojos datos de pingüinos y arreglo un poco \ndf &lt;- palmerpenguins::penguins %&gt;% \n  dplyr::select(species, bill_depth_mm, body_mass_g) %&gt;% \n  tidyr::drop_na()"
  },
  {
    "objectID": "my_trabajo_BigData.html#introducción",
    "href": "my_trabajo_BigData.html#introducción",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "",
    "text": "El siguiente trabajo está dividido en dos partes. En primer lugar, llevamos a cabo un análisis exhaustivo de las tendencias en la música popular de 2023 con datos extraídos directamente de Spotify. El enfoque particular de este estudio surge de variables que caracterizan las canciones más populares, como la “bailabilidad”, “energía” y “valentía”. Además, se trata de establecer una relación entre dichas variables y la popularidad de las canciones en diferentes plataformas, como la propia Spotify, Apple Music y Deezer. Utilizando una combinación de técnicas estadísticas y visualizaciones avanzadas, buscamos descubrir patrones y relaciones clave entre estas características musicales y métricas de éxito.\nEn la segunda parte, nos centramos en el artista Feid y el trabajo adquiere un enfoque concreto que no solo se dirige hacia la popularidad y distribución de las canciones de Feid en las plataformas de streaming musical, sino que también nos permite explorar las características musicales de sus canciones y su relación con otros artistas.\nEl objetivo del trabajo es ver a nivel global y a nivel particular qué comportamiento experimentan las canciones, qué coincidencias se encuentran a nivel de popularidad y qué tendencias se aprecian.\nLos datos se pueden cargar en la memoria de R/RStudio con este código:\n\n\nCódigo\n#Cargamos librerías necesarias\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(corrplot)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(cluster)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(gridExtra)\nlibrary(fmsb)\nlibrary(radarchart)\nlibrary(gganimate)\nlibrary(ggwordcloud)\nlibrary(png)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(\"vembedr\")\n\n\n#Cargamos los datos desde el archivo CSV\nfile_path &lt;- \"datos/spotify-2023.csv\"\ndf &lt;- read.csv(file_path, stringsAsFactors = FALSE)\n\n#Preparamos los datos: Limpieza y conversión de tipos de datos\ndf$streams &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$streams))\ndf$in_deezer_playlists &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$in_deezer_playlists))\ndf$in_shazam_charts &lt;- as.numeric(gsub(\"[^0-9]\", \"\", df$in_shazam_charts))\ndf$track_name_clean &lt;- iconv(df$track_name, to = \"ASCII\", sub = \"\")\ndf$artist.s._name &lt;- iconv(df$artist.s._name, to = \"UTF-8\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#análisis-global-de-tendencias-en-streams",
    "href": "my_trabajo_BigData.html#análisis-global-de-tendencias-en-streams",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Análisis Global de Tendencias en Streams",
    "text": "Análisis Global de Tendencias en Streams\nEl proyecto inicia con un análisis detallado de la distribución de streams entre las canciones, empleando un histograma transformado logarítmicamente. Este enfoque no solo aclara la distribución de los streams entre un gran número de canciones populares, sino que también resalta las tendencias generales y los patrones de popularidad. Este análisis es crucial para entender la dinámica del éxito en plataformas de streaming y para identificar qué nivel de streams es común entre las canciones más populares.\n\n\nCódigo\nggplot(df, aes(x = streams)) +\n  geom_histogram(bins = 60, fill = \"skyblue\", color = \"black\") +\n  scale_x_log10(breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n                labels = scales::trans_format(\"log10\", scales::math_format(10^.x))) +\n  theme_minimal() +\n  labs(title = \"Distribución de Streams de Canciones\",\n       x = \"Streams (Escala Logarítmica)\",\n       y = \"Frecuencia\")\n\n\n\n\n\n\n\n\n\n\n\n\nUn pingüino chulo\n\n\n\nSí, lo pingüinos molan, así que vamos a poner otra foto de pingüinos que tenemos en nuestro PC pero la vamos a poner en el margen:"
  },
  {
    "objectID": "my_trabajo_BigData.html#análisis-global-de-canciones-y-número-de-reproducciones",
    "href": "my_trabajo_BigData.html#análisis-global-de-canciones-y-número-de-reproducciones",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Análisis global de canciones y número de reproducciones",
    "text": "Análisis global de canciones y número de reproducciones\nEl proyecto inicia con un análisis detallado de la distribución de reproducciones entre las canciones, empleando un histograma transformado logarítmicamente. Este enfoque no solo aclara la distribución de los streams entre un gran número de canciones populares, sino que también resalta las tendencias generales y los patrones de popularidad. Este análisis es crucial para entender la dinámica del éxito en plataformas de streaming musical y para identificar qué nivel de reproducciones es común entre las canciones más populares.\n\nObjetivo: Analizar cómo se distribuyen las reproducciones entre las canciones populares.\nMétodo: Utilización de un histograma transformado logarítmicamente para una representación clara y detallada de la distribución de las reproducciones.\nIntención: Destacar las tendencias generales en la popularidad de las canciones y comprender mejor la dinámica de las reproducciones en el contexto de la música popular.\n\n\n\nCódigo\nggplot(df, aes(x = streams)) +\n  geom_histogram(bins = 60, fill = \"skyblue\", color = \"black\") +\n  scale_x_log10(breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n                labels = scales::trans_format(\"log10\", scales::math_format(10^.x))) +\n  theme_minimal() +\n  labs(title = \"Distribución de reproducciones de canciones\",\n       x = \"Reproducciones (escala logarítmica)\",\n       y = \"Frecuencia\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#relación-entre-características-musicales-y-popularidad",
    "href": "my_trabajo_BigData.html#relación-entre-características-musicales-y-popularidad",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Relación entre características musicales y popularidad",
    "text": "Relación entre características musicales y popularidad\nBueno pues vamos a hacer algún gráfico, pero claro antes he de cargar los paquetes\n\n\nCódigo\nlibrary(tidyverse)\n\n\nArreglo los datos\n\n\nCódigo\n#- cojos datos de pingüinos y arreglo un poco \ndf &lt;- palmerpenguins::penguins %&gt;% \n  dplyr::select(species, bill_depth_mm, body_mass_g) %&gt;% \n  tidyr::drop_na()\n\n\n\n\nPrimer gráfico\n\n\nCódigo\n#- primer gráfico\np &lt;- ggplot(data = df, \n       mapping = aes(x = bill_depth_mm, y = body_mass_g, color = species)) +\n     geom_point()\np\n\n\n\n\n\n\n\n\n\n\n\n\nSegundo\n\n\nCódigo\n#- segundo gráfico\np &lt;- p + geom_smooth(method = \"lm\", se = FALSE) \n\np\n\n\n\n\n\n\n\n\n\n\n\n\nEl último\n\n\nCódigo\n#- tercer gráfico\np + geom_smooth(method = \"lm\", se = FALSE, color = \"black\") \n\n\n\n\n\n\n\n\n\n\nCon esto acabo mi trabajo para BigData!!\n\n\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n\n\n current session info \n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Madrid\n date     2023-12-14\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version    date (UTC) lib source\n cli              3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n clipr            0.8.0      2022-02-22 [1] CRAN (R 4.3.0)\n cluster        * 2.1.4      2022-08-22 [1] CRAN (R 4.3.1)\n colorspace       2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n corrplot       * 0.92       2021-11-18 [1] CRAN (R 4.3.0)\n crayon           1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n data.table       1.14.8     2023-02-17 [1] CRAN (R 4.3.0)\n desc             1.4.2      2022-09-08 [1] CRAN (R 4.3.0)\n details          0.3.0      2022-03-27 [1] CRAN (R 4.3.0)\n digest           0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n dplyr          * 1.1.3.9000 2023-11-11 [1] Github (tidyverse/dplyr@6b5aa31)\n evaluate         0.21       2023-05-05 [1] CRAN (R 4.3.0)\n fansi            1.0.5      2023-10-08 [1] CRAN (R 4.3.1)\n farver           2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastmap          1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fmsb           * 0.7.5      2023-01-05 [1] CRAN (R 4.3.0)\n fontawesome      0.5.2      2023-08-19 [1] CRAN (R 4.3.0)\n forcats        * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n generics         0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n gganimate      * 1.0.8      2022-09-08 [1] CRAN (R 4.3.0)\n ggplot2        * 3.4.3      2023-08-14 [1] CRAN (R 4.3.0)\n ggrepel        * 0.9.4      2023-10-13 [1] CRAN (R 4.3.1)\n ggwordcloud    * 0.6.1      2023-10-26 [1] CRAN (R 4.3.1)\n glue             1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra      * 2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridtext         0.1.5      2022-09-16 [1] CRAN (R 4.3.0)\n gt             * 0.9.0      2023-03-31 [1] CRAN (R 4.3.0)\n gtable           0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n gtExtras       * 0.5.0      2023-09-15 [1] CRAN (R 4.3.0)\n hms              1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools        0.5.6      2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets      1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httr             1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n jsonlite         1.8.7      2023-06-29 [1] CRAN (R 4.3.0)\n knitr            1.43       2023-05-25 [1] CRAN (R 4.3.0)\n labeling         0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n lattice          0.21-8     2023-04-05 [1] CRAN (R 4.3.1)\n lazyeval         0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle        1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate      * 1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magick           2.8.1      2023-10-22 [1] CRAN (R 4.3.1)\n magrittr         2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n Matrix           1.6-1.1    2023-09-18 [1] CRAN (R 4.3.1)\n mgcv             1.8-42     2023-03-02 [1] CRAN (R 4.3.1)\n munsell          0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n nlme             3.1-162    2023-01-31 [1] CRAN (R 4.3.1)\n paletteer        1.5.0      2022-10-19 [1] CRAN (R 4.3.0)\n palmerpenguins   0.1.1      2022-08-15 [1] CRAN (R 4.3.0)\n pillar           1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig        2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n plotly         * 4.10.2     2023-06-03 [1] CRAN (R 4.3.0)\n plyr             1.8.8      2022-11-11 [1] CRAN (R 4.3.0)\n png            * 0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits      1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n progress         1.2.2      2019-05-16 [1] CRAN (R 4.3.0)\n purrr          * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6               2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n radarchart     * 0.3.1      2016-12-20 [1] CRAN (R 4.3.0)\n Rcpp             1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n readr          * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n rematch2         2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n reshape2       * 1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rlang            1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown        2.24       2023-08-14 [1] CRAN (R 4.3.0)\n rprojroot        2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi       0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n scales           1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo      1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n stringi          1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr        * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble         * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr          * 1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect       1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse      * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange       0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tweenr           2.0.2      2022-09-06 [1] CRAN (R 4.3.0)\n tzdb             0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n utf8             1.2.4      2023-10-22 [1] CRAN (R 4.3.1)\n vctrs            0.6.4      2023-10-12 [1] CRAN (R 4.3.1)\n viridisLite      0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n withr            2.5.2      2023-10-30 [1] CRAN (R 4.3.1)\n xfun             0.40       2023-08-09 [1] CRAN (R 4.3.0)\n xml2             1.3.5      2023-07-06 [1] CRAN (R 4.3.0)\n yaml             2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#relación-entre-características-musicales-y-rango-de-popularidad-por-cuartiles",
    "href": "my_trabajo_BigData.html#relación-entre-características-musicales-y-rango-de-popularidad-por-cuartiles",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Relación entre características musicales y rango de popularidad por cuartiles",
    "text": "Relación entre características musicales y rango de popularidad por cuartiles\nUna parte significativa del estudio se dedica a explorar cómo características específicas de las canciones como la “bailabilidad”, la “energía” y la “positividad” se correlacionan con su éxito en términos de reproducciones. Al dividir las canciones en cuartiles según su número de reproducciones, es posible destacar utilizando gráficos de caja y comparar las distribuciones de estas características musicales dentro de cada cuartil. Este análisis detallado proporciona insights sobre qué atributos musicales son más prevalentes en las canciones de mayor éxito.\n\nObjetivo: Examinar la relación entre la popularidad de las canciones (medida en reproducciones) y sus características musicales (“bailabilidad”, “energía”, “positividad”).\nMétodo: Clasificación de las canciones en cuartiles según sus reproducciones y posterior análisis de las características musicales para cada cuartil mediante gráficos de caja.\nIntención: Identificar si ciertas características musicales son más prevalentes en las canciones más populares.\n\n\n\nCódigo\n# Definir los cuartiles de streams\ncuartile_breaks &lt;- quantile(df$streams, probs = seq(0, 1, by = 0.25))\n\n# Crear una nueva columna en el dataframe para indicar el grupo de cuartil\ndf$stream_cuartile_group &lt;- cut(df$streams, \n                                breaks = cuartile_breaks, \n                                include.lowest = TRUE, \n                                labels = c(\"0-25%\", \"25-50%\", \"50-75%\", \"75-100%\"))\n\n\n#Transformar el dataframe para visualización\ndf_melted &lt;- melt(df, id.vars = \"stream_cuartile_group\", measure.vars = c(\"danceability_.\", \"energy_.\", \"valence_.\"))\n\n# Crear el gráfico de caja\nggplot(df_melted, aes(x = variable, y = value, fill = stream_cuartile_group)) +\n  geom_boxplot() +\n  scale_x_discrete(labels = c(\"Bailabilidad\", \"Energía\", \"Positividad\")) +\n  theme_minimal() +\n  labs(title = \"Características musicales por cuartiles de reproducciones\",\n       x = \"Característica\",\n       fill = \"Cuartiles\",\n       y = \"Valor\") +\n  facet_wrap(~stream_cuartile_group, scales = \"free\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#popularidad-de-canciones-por-mes-de-lanzamiento",
    "href": "my_trabajo_BigData.html#popularidad-de-canciones-por-mes-de-lanzamiento",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Popularidad de canciones por mes de lanzamiento",
    "text": "Popularidad de canciones por mes de lanzamiento\nEl trabajo también investiga factores como el mes de lanzamiento de las canciones y su influencia en la popularidad. Mediante gráficos de barras se analiza qué meses en particular recogen la mayor cantidad de éxitos, pudiendo entrever estrategias de marketing y tendencias de consumo.\n\nObjetivo: Investigar si el mes de lanzamiento influye en la popularidad de las canciones.\nMétodo: Creación de un gráfico de barras para mostrar la cantidad de canciones populares lanzadas cada mes.\nIntención: Descubrir si existe una tendencia estacional o un patrón en el lanzamiento de música exitosa.\n\n\n\nCódigo\n#Canciones populares por mes de lanzamiento\n# Convertir 'released_month' a factor con etiquetas de mes\ndf$released_month &lt;- factor(df$released_month, levels = 1:12, labels = month.abb)\n\n# Crear el gráfico de barras\nggplot(df, aes(x = released_month)) +\n  geom_bar(fill = \"green\") + \n  theme_minimal() +\n  labs(title = \"Canciones populares por mes de lanzamiento\",\n       x = \"Mes de lanzamiento\",\n       y = \"Número de canciones populares\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#número-de-reproducciones-por-cantidad-de-artistas-participantes",
    "href": "my_trabajo_BigData.html#número-de-reproducciones-por-cantidad-de-artistas-participantes",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Número de reproducciones por cantidad de artistas participantes",
    "text": "Número de reproducciones por cantidad de artistas participantes\nDel mismo modo, en este trabajo tratamos de encontrar alguna relación o tendencia entre las canciones con mayores reproducciones con la cantidad de artistas que participan en cada una de ellas.\n\nObjetivo: Explorar la relación entre el número de artistas en una canción y su éxito en términos de reproducciones.\nMétodo: Uso de un gráfico de dispersión para visualizar esta relación, con una transformación logarítmica en el eje de las reproducciones.\nIntención: Comprender si las colaboraciones o el número de artistas contribuyen al éxito de una canción.\n\n\n\nCódigo\nggplot(df, aes(x = artist_count, y = as.numeric(streams))) +\n  geom_point(aes(color = artist_count), alpha = 0.6) +\n  scale_y_log10() +\n  theme_minimal() +\n  scale_color_continuous(name = \"Número de artistas\") +\n  labs(title = \"Número de artistas vs Reproducciones\",\n       x = \"Número de artistas\",\n       y = \"Reproducciones\")"
  },
  {
    "objectID": "my_trabajo_BigData.html#análisis-de-canciones-por-clusters",
    "href": "my_trabajo_BigData.html#análisis-de-canciones-por-clusters",
    "title": "Comportamiento de las canciones más populares de Spotify en 2023 y una aproximación detallada a un cantante de éxito, Feid",
    "section": "Análisis de canciones por clusters",
    "text": "Análisis de canciones por clusters\nPor último, uno de los aspectos más importantes del trabajo ha sido poder agrupar las canciones más populares por clusters. Estos clusters tienen en cuenta las tres características cualitativas de las canciones para Spotify, como son la “bailabilidad”, la “energía” y la “positividad”. Esta clasificación sirve para encontrar canciones con elementos comunes y así poder concretar con mayor precisión que elementos son necesarios para que un tema musical pueda llegar a ser extremadamente popular.\nObjetivo: Agrupar canciones con características similares y analizar estos grupos.\nMétodo: Uso del algoritmo k-means para clasificar las canciones en clusters según características musicales, así como visualización mediante un gráfico 3D.\nIntención: Descubrir patrones o agrupaciones naturales en las canciones populares y entender qué combinaciones de características son comunes en las canciones exitosas.\n\n\nCódigo\n#Gráfico de canciones por clusters. RStudio clasifica las canciones por clusters de datos similares y agrupa las canciones más escuchadas en 4 grupos. De esta manera podemos saber qué canciones reúnen características similares dentro de las más escuchadas. \n\n# Análisis de clusters utilizando k-means\nset.seed(123)  # Para reproducibilidad\nkmeans_result &lt;- kmeans(df[, c(\"danceability_.\", \"energy_.\", \"valence_.\")], centers = 4)\n\n# Añadir la asignación de clusters al dataframe\ndf$cluster &lt;- as.factor(kmeans_result$cluster)\n\n# Crear una nueva columna para nombres de cluster personalizados\ndf$cluster_name &lt;- paste(\"Cluster\", df$cluster)\n\nplot_ly(df, x = ~danceability_., y = ~energy_., z = ~valence_., \n        color = ~cluster_name, text = ~track_name_clean, \n        colors = c('red', 'blue', 'green', 'yellow'),\n        marker = list(size = 10), type = 'scatter3d', mode = 'markers') %&gt;%\n  layout(title = \"Análisis de clusters de canciones\",\n         scene = list(xaxis = list(title = 'Bailabilidad'),\n                      yaxis = list(title = 'Energía'),\n                      zaxis = list(title = 'Positividad')))\n\n\n\n\n\n\n\nCon esto acabo mi trabajo para BigData!!\n\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n\n\n current session info \n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Madrid\n date     2023-12-14\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n clipr         0.8.0      2022-02-22 [1] CRAN (R 4.3.0)\n cluster     * 2.1.4      2022-08-22 [1] CRAN (R 4.3.1)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n corrplot    * 0.92       2021-11-18 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n crosstalk     1.2.0      2021-11-04 [1] CRAN (R 4.3.0)\n data.table    1.14.8     2023-02-17 [1] CRAN (R 4.3.0)\n desc          1.4.2      2022-09-08 [1] CRAN (R 4.3.0)\n details       0.3.0      2022-03-27 [1] CRAN (R 4.3.0)\n digest        0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.3.9000 2023-11-11 [1] Github (tidyverse/dplyr@6b5aa31)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n evaluate      0.21       2023-05-05 [1] CRAN (R 4.3.0)\n fansi         1.0.5      2023-10-08 [1] CRAN (R 4.3.1)\n farver        2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fmsb        * 0.7.5      2023-01-05 [1] CRAN (R 4.3.0)\n fontawesome   0.5.2      2023-08-19 [1] CRAN (R 4.3.0)\n forcats     * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n gganimate   * 1.0.8      2022-09-08 [1] CRAN (R 4.3.0)\n ggplot2     * 3.4.3      2023-08-14 [1] CRAN (R 4.3.0)\n ggrepel     * 0.9.4      2023-10-13 [1] CRAN (R 4.3.1)\n ggwordcloud * 0.6.1      2023-10-26 [1] CRAN (R 4.3.1)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra   * 2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridtext      0.1.5      2022-09-16 [1] CRAN (R 4.3.0)\n gt          * 0.9.0      2023-03-31 [1] CRAN (R 4.3.0)\n gtable        0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n gtExtras    * 0.5.0      2023-09-15 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.6      2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httr          1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n jsonlite      1.8.7      2023-06-29 [1] CRAN (R 4.3.0)\n knitr         1.43       2023-05-25 [1] CRAN (R 4.3.0)\n labeling      0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n lazyeval      0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate   * 1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magick        2.8.1      2023-10-22 [1] CRAN (R 4.3.1)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n paletteer     1.5.0      2022-10-19 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n plotly      * 4.10.2     2023-06-03 [1] CRAN (R 4.3.0)\n plyr          1.8.8      2022-11-11 [1] CRAN (R 4.3.0)\n png         * 0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n progress      1.2.2      2019-05-16 [1] CRAN (R 4.3.0)\n purrr       * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n radarchart  * 0.3.1      2016-12-20 [1] CRAN (R 4.3.0)\n Rcpp          1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n rematch2      2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n reshape2    * 1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.24       2023-08-14 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble      * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr       * 1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse   * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tweenr        2.0.2      2022-09-06 [1] CRAN (R 4.3.0)\n tzdb          0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n utf8          1.2.4      2023-10-22 [1] CRAN (R 4.3.1)\n vctrs         0.6.4      2023-10-12 [1] CRAN (R 4.3.1)\n viridisLite   0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n withr         2.5.2      2023-10-30 [1] CRAN (R 4.3.1)\n xfun          0.40       2023-08-09 [1] CRAN (R 4.3.0)\n xml2          1.3.5      2023-07-06 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023",
    "href": "my_trabajo_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023",
    "text": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023\n\nAnálisis global de canciones y número de reproducciones\nIniciamos el proyecto con un análisis detallado de la distribución de reproducciones entre las canciones, empleando un histograma transformado logarítmicamente. Este enfoque no solo aclara la distribución de las reproducciones entre un gran número de canciones populares, sino que también resalta las tendencias generales y los patrones de popularidad. Este análisis es crucial para entender la dinámica del éxito en plataformas de streaming musical y para identificar qué nivel de reproducciones es común entre las canciones más populares.\n\nObjetivo: Analizar cómo se distribuyen las reproducciones entre las canciones populares.\nMétodo: Utilización de un histograma transformado logarítmicamente para una representación clara y detallada de la distribución de las reproducciones.\n\n\n\nCódigo\n\nggplot(df, aes(x = streams)) +\n  geom_histogram(bins = 60, fill = \"skyblue\", color = \"black\") +\n  scale_x_log10(breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n                labels = scales::trans_format(\"log10\", scales::math_format(10^.x))) +\n  theme_minimal() +\n  labs(title = \"Distribución de reproducciones de canciones\",\n       x = \"Reproducciones (escala logarítmica)\",\n       y = \"Frecuencia\")\n\n\n\n\nPopularidad de canciones por mes de lanzamiento\nInvestigamos también factores como el mes de lanzamiento de las canciones y su influencia en la popularidad. Mediante gráficos de barras analizamos qué meses en particular recogen la mayor cantidad de éxitos, pudiendo entrever estrategias de marketing y tendencias de consumo.\n\nObjetivo: Investigar si el mes de lanzamiento influye en la popularidad de las canciones.\nMétodo: Creación de un gráfico de barras para mostrar la cantidad de canciones populares lanzadas cada mes.\n\n\n\nCódigo\n\n#Canciones populares por mes de lanzamiento\n# Convertir 'released_month' a factor con etiquetas de mes\ndf$released_month &lt;- factor(df$released_month, levels = 1:12, labels = month.abb)\n\n# Crear el gráfico de barras\nggplot(df, aes(x = released_month)) +\n  geom_bar(fill = \"green\") + \n  theme_minimal() +\n  labs(title = \"Canciones populares por mes de lanzamiento\",\n       x = \"Mes de lanzamiento\",\n       y = \"Número de canciones populares\")\n\n\n\n\nNúmero de reproducciones por cantidad de artistas participantes\nDel mismo modo, tratamos de encontrar alguna relación o tendencia entre las canciones con mayores reproducciones con la cantidad de artistas que participan en cada una de ellas.\n\nObjetivo: Explorar la relación entre el número de artistas en una canción y su éxito en términos de reproducciones.\nMétodo: Uso de un gráfico de dispersión para visualizar esta relación, con una transformación logarítmica en el eje de las reproducciones.\n\n\n\nCódigo\n\nggplot(df, aes(x = artist_count, y = as.numeric(streams))) +\n  geom_point(aes(color = artist_count), alpha = 0.6) +\n  scale_y_log10() +\n  theme_minimal() +\n  scale_color_continuous(name = \"Número de artistas\") +\n  labs(title = \"Número de artistas vs Reproducciones\",\n       x = \"Número de artistas\",\n       y = \"Reproducciones\")\n\n\n\n\nRelación entre características musicales y rango de popularidad por cuartiles\nUna parte significativa del estudio la dedicamos a explorar de qué forma características específicas de las canciones como la “bailabilidad”, la “energía” y la “positividad” se correlacionan con su éxito en términos de reproducciones. Al dividir las canciones en cuartiles según su número de reproducciones, es posible destacar utilizando gráficos de caja y comparar las distribuciones de estas características musicales dentro de cada cuartil. Este análisis detallado proporciona información sobre qué atributos musicales son más importantes en las canciones de mayor éxito.\n\nObjetivo: Examinar la relación entre la popularidad de las canciones (medida en reproducciones) y sus características musicales (“bailabilidad”, “energía”, “positividad”).\nMétodo: Clasificación de las canciones en cuartiles según sus reproducciones y posterior análisis de las características musicales para cada cuartil mediante gráficos de caja.\n\n\n\nCódigo\n\n# Definir los cuartiles de streams\ncuartile_breaks &lt;- quantile(df$streams, probs = seq(0, 1, by = 0.25))\n\n# Crear una nueva columna en el dataframe para indicar el grupo de cuartil\ndf$stream_cuartile_group &lt;- cut(df$streams, \n                                breaks = cuartile_breaks, \n                                include.lowest = TRUE, \n                                labels = c(\"0-25%\", \"25-50%\", \"50-75%\", \"75-100%\"))\n\n\n#Transformar el dataframe para visualización\ndf_melted &lt;- melt(df, id.vars = \"stream_cuartile_group\", measure.vars = c(\"danceability_.\", \"energy_.\", \"valence_.\"))\n\n# Crear el gráfico de caja\nggplot(df_melted, aes(x = variable, y = value, fill = stream_cuartile_group)) +\n  geom_boxplot() +\n  scale_x_discrete(labels = c(\"Bailabilidad\", \"Energía\", \"Positividad\")) +\n  theme_minimal() +\n  labs(title = \"Características musicales por cuartiles de reproducciones\",\n       x = \"Característica\",\n       fill = \"Cuartiles\",\n       y = \"Valor\") +\n  facet_wrap(~stream_cuartile_group, scales = \"free\")\n\n\n\n\nAnálisis de la correlación entre características musicales y presencia en listas de reproducción\nEn este caso buscamos averiguar si las características musicales específicas —bailabilidad, energía y valentía— de las canciones se correlacionan con su presencia en listas de reproducción en distintas plataformas de streaming musical (Spotify, Apple Music y Deezer).\n\nObjetivo: El análisis busca identificar si ciertas características musicales están más asociadas con una mayor inclusión en listas de reproducción en cada paltaforma.\nMétodo: Normalización de los datos para una correcta comparación y gráficas de dispersión para una mejor visualización.\n\n\n\nCódigo\n# Gráficas que muestran las diferencias de los valores de bailabilidad, energía y valentía con respecto a la aparición en listas de reproducción en cada plataforma.\n\n# Cargar las librerías necesarias\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\n\n# Función para normalizar los datos\nnormalize &lt;- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\n# Normalizar las columnas de apariciones en listas de reproducción\ndf &lt;- df %&gt;%\n  mutate(in_spotify_playlists_norm = normalize(in_spotify_playlists),\n         in_apple_playlists_norm = normalize(in_apple_playlists),\n         in_deezer_playlists_norm = normalize(in_deezer_playlists))\n\n# Eliminar filas con valores NA en las columnas relevantes\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(danceability_.) & \n           !is.na(in_spotify_playlists_norm) & \n           !is.na(in_apple_playlists_norm) & \n           !is.na(in_deezer_playlists_norm))\n\n# Bailabilidad\n# Gráfico para Spotify\np1 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Bailabilidad vs Apariciones Normalizadas en Spotify\",\n       x = \"Bailabilidad (%)\",\n       y = \"Apariciones Normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico para Apple Music\np2 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(title = \"Bailabilidad vs Apariciones Normalizadas en Apple Music\",\n       x = \"Bailabilidad (%)\",\n       y = \"Apariciones Normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico para Deezer\np3 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(title = \"Bailabilidad vs Apariciones Normalizadas en Deezer\",\n       x = \"Bailabilidad (%)\",\n       y = \"Apariciones Normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinar los gráficos\ncombined_plot &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n\n# Mostrar el gráfico combinado\ncombined_plot\n\n# Energía\n# Gráfico para Spotify\np1 &lt;- ggplot(df_clean, aes(x = energy_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Energía vs Apariciones normalizadas en Spotify\",\n       x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico para Apple Music\np2 &lt;- ggplot(df_clean, aes(x = energy_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(title = \"Energía vs Apariciones normalizadas en Apple Music\",\n       x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico para Deezer\np3 &lt;- ggplot(df_clean, aes(x = energy_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(title = \"Energía vs Apariciones normalizadas en Deezer\",\n       x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinar los gráficos\ncombined_plot1 &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n\n# Mostrar el gráfico combinado\ncombined_plot1\n\n# Valentía\n# Gráfico para Spotify\np1 &lt;- ggplot(df_clean, aes(x = valence_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Positividad vs Apariciones normalizadas en Spotify\",\n       x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico para Apple Music\np2 &lt;- ggplot(df_clean, aes(x = valence_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(title = \"Positividad vs Apariciones normalizadas en Apple Music\",\n       x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico para Deezer\np3 &lt;- ggplot(df_clean, aes(x = valence_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(title = \"Positividad vs Apariciones normalizadas en Deezer\",\n       x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinar los gráficos\ncombined_plot2 &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n\n# Mostrar el gráfico combinado\ncombined_plot2\n\n\n\n\nAnálisis de canciones por clusters\nPor último, uno de los aspectos más importantes del trabajo ha sido poder agrupar las canciones más populares por clusters. Estos clusters tienen en cuenta las tres características cualitativas de las canciones para Spotify, como son la “bailabilidad”, la “energía” y la “positividad”. Esta clasificación sirve para encontrar canciones con elementos comunes y así poder concretar con mayor precisión qué elementos son necesarios para que un tema musical pueda llegar a ser extremadamente popular.\nObjetivo: Agrupar canciones con características similares y analizar estos grupos.\nMétodo: Uso del algoritmo k-means para clasificar las canciones en clusters según características musicales, así como visualización mediante un gráfico 3D.\n\n\nCódigo\n#Gráfico de canciones por clusters. RStudio clasifica las canciones por clusters de datos similares y agrupa las canciones más escuchadas en 4 grupos. De esta manera podemos saber qué canciones reúnen características similares dentro de las más escuchadas. \n\n# Análisis de clusters utilizando k-means\nset.seed(123)  # Para reproducibilidad\nkmeans_result &lt;- kmeans(df[, c(\"danceability_.\", \"energy_.\", \"valence_.\")], centers = 4)\n\n# Añadir la asignación de clusters al dataframe\ndf$cluster &lt;- as.factor(kmeans_result$cluster)\n\n# Crear una nueva columna para nombres de cluster personalizados\ndf$cluster_name &lt;- paste(\"Cluster\", df$cluster)\n\nplot_ly(df, x = ~danceability_., y = ~energy_., z = ~valence_., \n        color = ~cluster_name, text = ~track_name_clean, \n        colors = c('red', 'blue', 'green', 'yellow'),\n        marker = list(size = 10), type = 'scatter3d', mode = 'markers') %&gt;%\n  layout(title = \"Análisis de clusters de canciones\",\n         scene = list(xaxis = list(title = 'Bailabilidad'),\n                      yaxis = list(title = 'Energía'),\n                      zaxis = list(title = 'Positividad')))"
  },
  {
    "objectID": "my_trabajo_BigData.html#segunda-parte-ferxxo-en-el-foco.-aproximación-a-un-cantante-de-éxito",
    "href": "my_trabajo_BigData.html#segunda-parte-ferxxo-en-el-foco.-aproximación-a-un-cantante-de-éxito",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Segunda parte: Ferxxo en el foco. Aproximación a un cantante de éxito",
    "text": "Segunda parte: Ferxxo en el foco. Aproximación a un cantante de éxito\nPreparamos los datos para la siguiente fase del trabajo:\n\n\nCódigo\n#Filtramos el df para Feid.\ndf_feid &lt;- df %&gt;%\n  filter(grepl(\"Feid\", artist.s._name, ignore.case = TRUE))\n\n\n\nBiografia del artista\nSalomón Villada Hoyos (Medellín, 19 de agosto de 1992), mejor conocido por su nombre artístico Feid o por su alter ego Ferxxo, es un cantante, compositor y productor discográfico colombiano.\nCon una energía positiva, muy buen rollo y colaboraciones junto a varios artistas, Feid nos trae la banda sonora urbana del 2023.\n\n\n\nFeid\n\n\n\n\nAnálisis de distribución de canciones por artista\n\nGráficosMetodologíaResultados\n\n\n\n\nCódigo\n#Primero comparamos todos los cantantes\n\n# Contamos la cantidad de canciones por artista\ncount_df_artist &lt;- table(df$artist.s._name)\n\n# Filtramos los artistas con más de cinco canciones\nfiltered_count_df_artist &lt;- count_df_artist[count_df_artist &gt; 5]\n\n# Creamos un dataframe para los gráficos\ndf_circ_artist &lt;- data.frame(artist = names(filtered_count_df_artist), count = as.numeric(filtered_count_df_artist))\n\n# Creamos el gráfico circular para todos los artistas:\nc1 &lt;- ggplot(df_circ_artist, aes(x = \"\", y = count, fill = artist)) +\n  geom_bar(stat = \"identity\", width = 1, color = ifelse(df_circ_artist$artist == \"Feid\", \"black\", NA)) +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Proporción de canciones por artista en el TOP 1000\", \n       fill = \"Artista\",\n       x = NULL, y = NULL) +\n  theme_void() +\n  theme(legend.position = \"bottom\")\nc1\n# Creamos otro gráfico para comparar al Ferxxo con los otros\nc2 &lt;- ggplot(df, aes(x = \"\", fill = ifelse(grepl(\"Feid\", artist.s._name, ignore.case = TRUE), \"Feid\", \"Otros\"))) +\n  geom_bar(stat = \"count\", width = 1) + \n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Proporción de canciones de Feid en el TOP 1000 vs Otros\",\n       fill = \"Artista\",\n       x = NULL, y = NULL) +\n  theme_void() +\n  theme(legend.position = \"bottom\") +\n  scale_fill_manual(values = c(\"Feid\" = \"#1DB954\", \"Otros\" = \"pink\")) \nc2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdentrándonos en el análisis de la distribución de canciones por artista, destacamos la proporción de canciones de Ferxxo en comparación con otros artistas entre las canciones más populares de 2023. Utilizamos un gráfico circular para ilustrar de forma clara y sencilla la diversidad artística.\n\nObjetivo: Examinar cómo se distribuyen las canciones entre Feid y otros artistas.\nMétodo: Uso de gráficos circulares para visualizar la proporción de canciones de Feid en comparación con otros artistas.\n\n\n\nCon los gráficos circulares, podemos observar la significativa presencia de Ferxxo en el panorama musical de 2023. Esto nos sugiere que se encuentra entre las preferencias de los oyentes.\n\n\n\n\n\nÉxitos en el TOP 10: Las 10 canciones más escuchadas de Ferxxo en 2023\n\nTablaMetodologíaResultado\n\n\n\n\nCódigo\n# Top 10:\n\n# Filtramos el df para Feid y ordenamos según la variable streams\ndf_feid &lt;- df %&gt;%\n  filter(grepl(\"Feid\", artist.s._name, ignore.case = TRUE)) %&gt;%\n  arrange(desc(streams))\n\n# Sacamos las 10 canciones más escuchadas\ntop_10_feid &lt;- df_feid[1:10, ]\n\n# Renombramos las columnas\ntop_10_feid &lt;- top_10_feid %&gt;%\n  rename(\n    \"Cancion\" = track_name,\n    \"Artista\" = artist.s._name,\n    \"Reproducciones\" = streams,\n    \"Bailabilidad\" = danceability_.,\n    \"Positividad\" = valence_.,\n    \"Energia\" = energy_.,\n    \"Acustica\" = acousticness_.,\n    \"Viveza\" = liveness_.\n  )\n\n#Cambiamos el nombre de una canción para omitir algunos caracteres:\ntop_10_feid &lt;- top_10_feid %&gt;%\n  mutate(Cancion = ifelse(Cancion == \"Feliz Cumplea��os Fe\", \"Feliz Cumpleaños Ferxxo\", Cancion))\n\n# Seleccionamos las variables de interés\ntabla_top_10_feid &lt;- top_10_feid %&gt;%\n  select(Cancion, Artista, Reproducciones, Bailabilidad, Positividad, Energia, Acustica, Viveza) %&gt;%\n  gt(rowname_col = \"Cancion\") %&gt;%\n  tab_header(\n    title = md(\"**TOP 10 FEID**\"),\n    subtitle = md(\"*Canciones más escuchadas*\")\n  ) %&gt;%\n  cols_align(align = \"center\") %&gt;%\n  cols_align(align = \"right\", columns = c(\"Cancion\", \"Artista\")) %&gt;%\n  cols_merge(columns = c(\"Cancion\", \"Artista\"), pattern = \"{1} - {2}\") %&gt;%\n  cols_label(\n    Cancion = \"Cancion\",\n    Artista = \"Artista\",\n    Reproducciones = paste0(\"🔄\", \" Reproducciones\"),\n    Bailabilidad = paste0(\"💃\", \" Bailabilidad\"),\n    Positividad = paste0(\"😃️\", \"Positividad\"),\n    Energia = paste0(\"⚡️\", \" Energia\"),\n    Acustica = paste0(\"🎸\", \" Acustica\"),\n    Viveza = paste0(\"🔊\", \" Viveza\"),\n  ) %&gt;%\n  opt_row_striping() %&gt;%\n  opt_table_font(font = google_font(\"Amatic SC\")) %&gt;%\n  tab_options(\n    column_labels.background.color = \"#39423c\",\n    footnotes.background.color = \"#39423c\",\n    source_notes.background.color = \"#39423c\",\n    heading.background.color = \"#39423c\",\n    heading.align = \"left\"\n  ) %&gt;%\n  tab_style(style = cell_text(color = \"#1DB954\", size = px(32)), locations = cells_title(\"title\"))\n\n#Mostramos la tabla:\ntabla_top_10_feid\n\n\n\n\n\n  \n    \n      TOP 10 FEID\n    \n    \n      Canciones más escuchadas\n    \n    \n      \n      🔄 Reproducciones\n      💃 Bailabilidad\n      😃️Positividad\n      ⚡️ Energia\n      🎸 Acustica\n      🔊 Viveza\n    \n  \n  \n    Hey Mor - Ozuna, Feid\n674072710\n90\n40\n59\n0\n10\n    Feliz Cumpleaños Ferxxo - Feid\n601863821\n87\n57\n55\n10\n29\n    Yandel 150 - Yandel, Feid\n585695368\n78\n58\n73\n5\n10\n    LA INOCENTE - Feid, Mora\n477033549\n76\n46\n79\n31\n7\n    Normal - Feid\n459276435\n71\n59\n56\n4\n27\n    CHORRITO PA LAS ANIMAS - Feid\n345031710\n74\n61\n83\n11\n35\n    Classy 101 - Feid, Young Miko\n335222234\n86\n67\n66\n14\n12\n    ULTRA SOLO REMIX - De La Ghetto, Feid, Polima WestCoast, Paloma Mami, Pailita\n279717388\n91\n59\n82\n8\n6\n    Ferxxo 100 - Feid\n278920007\n70\n58\n57\n25\n15\n    Pantysito - Feid, Alejo, Robi\n273005485\n83\n63\n74\n14\n16\n  \n\n\n\n\n\n\nA continuación, es posible descubrir los éxitos más destacados de Ferxxo mientras se filtran y se ordenan sus canciones según la cantidad de reproducciones. Esta tabla muestra las canciones más populares, abordando aspectos como reproducciones, bailabilidad, positividad, energía, acústica y viveza.\n\nObjetivo: Identificar las canciones más populares de Feid.\nMétodo: Ordenar las canciones de Feid por número de reproducciones y seleccionar las 10 principales.\n\n\n\nCon esta tabla, hemos querido reflejar las 10 canciones mejor acogidas por los oyentes, además de mostrar las características individuales de cada canción.\n\n\n\n\n\nExplorando en profundidad las características del TOP 10 de Ferxxo\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n# Seleccionamos variables de interés\ntop_10_radar &lt;- top_10_feid %&gt;%\n  select(Cancion, Bailabilidad, Positividad, Energia, Acustica, Viveza)\n\n# Creamos datos para el gráfico de radar principal\nset.seed(99)\ndata_for_radar &lt;- as.data.frame(matrix(sample(0:100, 50, replace = TRUE), ncol = 5))\ncolnames(data_for_radar) &lt;- c(\"Bailabilidad\", \"Positividad\", \"Energia\", \"Acustica\", \"Viveza\")\n\n# Convertimos los datos a formato long\ndata_for_radar_long &lt;- pivot_longer(data_for_radar, cols = starts_with(\"Bailabilidad\"), names_to = \"Variable\", values_to = \"Value\")\n\n# Convertimos la Variable a factor\ndata_for_radar_long$Variable &lt;- factor(data_for_radar_long$Variable, levels = c(\"Bailabilidad\", \"Positividad\", \"Energia\", \"Acustica\", \"Viveza\"))\n\n# Creamos datos para el gráfico de radar adicional (EL IMPORTANTE!!!)\nset.seed(99)\ndata_additional &lt;- as.data.frame(matrix(sample(0:100, 50, replace = TRUE), ncol = 5))\ncolnames(data_additional) &lt;- c(\"Bailabilidad\", \"Positividad\", \"Energia\", \"Acustica\", \"Viveza\")\nrownames(data_additional) &lt;- paste(\"Cancion\", 1:10)\n\ndata_additional &lt;- rbind(rep(100, 5), rep(0, 5), data_additional)\n\ndata_additional_long &lt;- pivot_longer(data_additional, cols = starts_with(\"Bailabilidad\"), names_to = \"Cancion\", values_to = \"Value\")\n\ndata_additional_long$Cancion &lt;- factor(data_additional_long$Cancion, levels = c(\"Bailabilidad\", \"Positividad\", \"Energia\", \"Acustica\", \"Viveza\"))\n\n# Creamos un vector de colores numéricos para la leyenda\nlegend_colors &lt;- as.numeric(factor(top_10_radar$Cancion))\n\n# Creamos el  gráfico de radar adicional\nradarchart(data_additional, axistype = 1, title = \"Gráfico de Radar - Top 10 Feid\", lty = 1, cglty = 1, cglcol = \"gray\", cglwd = 1, pcol = legend_colors, plwd = 2, plty = 1)\n\n# Obtenemos el número total de canciones y las dividimos para mejorar la leyenda:\nnum_songs &lt;- nrow(top_10_radar)\n\nsongs_row1 &lt;- top_10_radar$Cancion[1:5]\nsongs_row2 &lt;- top_10_radar$Cancion[6:10]\n\nlegend(\"left\",\n       title = expression(bold(\"Canciones\")),\n       legend = c(songs_row1, songs_row2),\n       bty = \"n\", pch = 20, col = legend_colors,\n       text.col = \"black\", pt.cex = 1.5, ncol = 1, inset = c(-0.001, -0.04),\n       cex = 0.5)  \n\n\n\n\n\n\n\n\n\n\n\nEn este apartado analizamos las canciones de Ferxxo mediante un gráfico de radar que resalta sus características distintivas. Este gráfico nos permiten apreciar la bailabilidad, positividad, energía, acústica y viveza presentes en sus canciones.\n\nObjetivo: Analizar en detalle las características musicales de las canciones más populares de Feid.\nMétodo: Creación de un gráfico de radar para visualizar las características como bailabilidad, positividad, energía, etc, asignando a cada canción un color.\n\n\n\nAl profundizar en las características del TOP 10 de Ferxxo mediante el uso de un gráfico de radar, podemos obtener una visión detallada de sus peculiaridades. Esto también se puede observar en la tabla, pero aquí de manera más visual.\n\n\n\n\n\nViaje a través de las características individuales de nuestras canciones favoritas\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n#A partir de top_10_radar creamos cinco gráficos de dispersión interactivos, uno para cada caracteristica\n\n# Creamos el gráfico de ggplot\ncombi &lt;- ggplot(top_10_radar, aes(x = Cancion)) +\n  geom_point(aes(y = Bailabilidad,color = \"Bailabilidad\", text = paste(\"Bailabilidad:\", round(Bailabilidad, 1))), size = 3, alpha = 0.7) +\n  geom_point(aes(y = Viveza, color = \"Viveza\", text = paste(\"Viveza:\", round(Viveza, 2))), size = 3, alpha = 0.7) +\n  geom_point(aes(y = Positividad, color = \"Positividad\", text = paste(\"Positividad:\", round(Positividad, 2))), size = 3, alpha = 0.7) +\n  geom_point(aes(y = Energia, color = \"Energia\", text = paste(\"Energia:\", round(Energia, 2))), size = 3, alpha = 0.7) +\n  geom_point(aes(y = Acustica, color = \"Acustica\", text = paste(\"Acustica:\", round(Acustica, 2))), size = 3, alpha = 0.7) +\n  geom_line(aes(y = Bailabilidad, group = 1), color = \"purple\", size = 1) +\n  geom_line(aes(y = Viveza, group = 1), color = \"blue\", size = 1) +\n  geom_line(aes(y = Positividad, group = 1), color = \"pink\", size = 1) +\n  geom_line(aes(y = Energia, group = 1), color = \"green\", size = 1) +\n  geom_line(aes(y = Acustica, group = 1), color = \"aquamarine\", size = 1) +\n  geom_text(aes(y = Bailabilidad + 0.02, label = round(Bailabilidad, 2)), color = \"purple\", size = 3, hjust = 0, vjust = 0.5) +\n  geom_text(aes(y = Viveza + 0.02, label = round(Viveza, 2)), color = \"blue\", size = 3, hjust = 0, vjust = 0.5) +\n  geom_text(aes(y = Positividad + 0.02, label = round(Positividad, 2)), color = \"pink\", size = 3, hjust = 0, vjust = 0.5) +\n  geom_text(aes(y = Energia + 0.02, label = round(Energia, 2)), color = \"green\", size = 3, hjust = 0, vjust = 0.5) +\n  geom_text(aes(y = Acustica + 0.02, label = round(Acustica, 2)), color = \"aquamarine\", size = 3, hjust = 0, vjust = 0.5) +\n  scale_color_manual(\n    values = c(\n      Bailabilidad = \"purple\",\n      Viveza = \"blue\",\n      Positividad = \"pink\",\n      Energia = \"green\",\n      Acustica = \"aquamarine\"\n    ),\n    name = \"Característica\"\n  ) +\n  labs(title = \"Gráfico de Dispersión - Todas las Características\",\n       x = \"Canción\",\n       y = \"Valor de la Característica\",\n       color = \"Característica\") +\n  theme_minimal()\n\n# Para hacerlo interactivo:\ncombi_plotly &lt;- ggplotly(combi)\ncombi_plotly\n\n\n\n\n\n\n\n\nExploramos de otra forma las características individuales de las canciones de Feid a través de gráficos de dispersión. Cada gráfico se centra en una característica única, desde la bailabilidad hasta la viveza, proporcionando una visión detallada y personalizada de la esencia musical de Ferxxo.\n\nObjetivo: Con la representación individual de cada canción de Feid se pretende obtener una evaluación detallada de los atributos de sus canciones.\nMétodo: Se utiliza un gráfico de dispersión donde cada punto representa una canción.\n\n\n\nCon esto buscamos otra manera de visualizar lo mismo, pero ahora de forma visual, detallada y personalizada.\n\n\n\n\n\nComparación de popularidad en Spotify y Apple Music\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n# Normalizamos las columnas de apariciones en listas de reproducción\nnormalize &lt;- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\nnewtop &lt;- top_10_feid %&gt;%\n  select(Cancion, in_spotify_playlists, in_apple_playlists) %&gt;%\n  mutate(\n    in_spotify_playlists_norm = normalize(in_spotify_playlists),\n    in_apple_playlists_norm = normalize(in_apple_playlists)\n  ) %&gt;%\n  filter(!is.na(in_spotify_playlists_norm) | !is.na(in_apple_playlists_norm))\n\n# Creamos el gráfico ggplot con barras horizontales\ncomp_playlist &lt;- ggplot(newtop, aes(y = factor(Cancion))) +\n  geom_bar(aes(x = in_spotify_playlists_norm, fill = \"Spotify\"), stat = \"identity\", position = \"dodge\") +\n  geom_bar(aes(x = in_apple_playlists_norm, fill = \"Apple Music\"), \n    stat = \"identity\", position = \"dodge\", alpha = 0.5) +\n  labs(title = \"Popularidad normalizada por canción en Spotify y Apple Music\",\n       x = \"Playlists normalizadas\",\n       y = \"Canción\") +\n  scale_fill_manual(values = c(\"Spotify\" = \"#1DB954\", \"Apple Music\" = \"#FF2F54\")) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1))  \n\n# Para hacerlo interactivo:\ncomp_plotly &lt;- ggplotly(comp_playlist)\ncomp_plotly\n\n\n\n\n\n\n\n\nExaminamos la popularidad de las canciones de Feid en Spotify y Apple Music a través de un gráfico interactivo. Este análisis incluye la presencia en playlists de ambas plataformas, ofreciendo una visión personalizada de cómo las canciones de Ferxxo se posicionan en el mundo de la música en la era digital. Al contrario que en la primera parte del trabajo, se prescinde de Deezer para ver de forma más fácil la comparación.\n\nObjetivo: Comparar la popularidad de las canciones de Feid en Spotify y Apple Music.\nMétodo: Uso de gráficos de barras para visualizar la presencia en playlists de ambas plataformas.\n\n\n\nLa comparación de la popularidad en Spotify y Apple Music proporciona una visión valiosa de cómo las canciones de Ferxxo se posicionan en el ámbito digital. Al normalizar los datos, dado que cada plataforma difiere significativamente en el número de oyentes y la cantidad de playlists, podemos observar, por ejemplo, que “Yandel 150” destacó más en Spotify, mientras que “Normal” lo hizo en Apple Music.\n\n\n\n\n\nDescubriendo colaboradores musicales en las canciones de Feid\n\nWord CloudMetodologíaResultado\n\n\n\n\nCódigo\n# Creamos un nuevo df de artistas colaboradores y eliminamos a Feid de estos:\ndf_colab &lt;- df_feid %&gt;%\n  select(artist.s._name) %&gt;%\n  mutate(artist.s._name = gsub(\"Feid\", \"\", artist.s._name)) %&gt;%\n  filter(!is.na(artist.s._name)) %&gt;%\n  separate_rows(artist.s._name, sep = \",\")%&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  distinct() %&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  mutate(artist.s._name = str_trim(artist.s._name)) %&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  rename(\n    \"Colaboradores\" = artist.s._name)\n\nset.seed(42)\n\n# Creamos el word cloud de los colaboradores:\nggplot(df_colab, aes(label = Colaboradores, color = Colaboradores, size = runif(nrow(df_colab)))) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 30) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nEn esta sección, nos sumergimos en la exploración visual de los colaboradores que han dejado su huella en las canciones de Ferxxo. A través de un intrigante Word Cloud, cada palabra representa a un artista colaborador, y en diferentes colores. Esta representación gráfica nos brinda una visión única y artística de las conexiones que Ferxxo ha cultivado en su viaje musical.\n\nObjetivo: Investigar las colaboraciones musicales en las canciones de Feid.\nMétodo: Creación de un Word Cloud para representar visualmente a los artistas colaboradores.\n\n\n\nCon la visualización a través del Word Cloud, se puede apreciar que Feid ha colaborado con artistas como Young Miko, Ozuna, Yandel, entre otros."
  },
  {
    "objectID": "my_trabajo_BigData.html#explorando-en-profundidad-las-características-del-top-10-de-ferxxo",
    "href": "my_trabajo_BigData.html#explorando-en-profundidad-las-características-del-top-10-de-ferxxo",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Explorando en profundidad las características del TOP 10 de Ferxxo",
    "text": "Explorando en profundidad las características del TOP 10 de Ferxxo\nEn este apartado analizamos las canciones de Ferxxo mediante gráficos de radar que resaltan sus características distintivas. Estos gráficos nos permiten apreciar la bailabilidad, positividad, energía, acústica y viveza presentes en sus canciones. Además, incluimos un gráfico adicional con datos simulados para comparar y enriquecer aún más la experiencia musical.\n\nObjetivo: Analizar en detalle las características musicales de las canciones más populares de Feid.\nMétodo: Creación de gráficos de radar para visualizar las características como bailabilidad, positividad, energía, etc.\nIntención: Ofrecer una visión comprensiva de las propiedades musicales que definen el éxito de las canciones de Feid.\n\n\n\nCódigo\n# Seleccionar variables de interés para el gráfico de radar\ntop_10_radar &lt;- top_10_feid %&gt;%\n  select(Bailabilidad, Positividad, Energia, Acustica, Viveza)\n\n# Convertir los datos a formato largo para el gráfico de radar\ntop_10_radar_long &lt;- pivot_longer(top_10_radar, cols = everything(), names_to = \"Variable\", values_to = \"Value\")\n\n# Crear el gráfico de radar\nradarchart(top_10_radar_long, \n           title = \"Gráfico de Radar - Top 10 de Feid\",\n           pfcol = rainbow(10),\n           plwd = 2,\n           axistype = 1,\n           pcol = rgb(0.2, 0.5, 0.2, alpha = 0.2),\n           vlcex = 0.8,\n           cglcol = \"grey\",\n           cglty = 1,\n           cglwd = 0.5)\n#&gt; The number of variables must be 3 or more.\n#&gt; NULL\n\n# Simplificación del código para el segundo gráfico de radar\n# Utilizar los mismos datos pero con diferentes colores para diferenciar las canciones\nradarchart(top_10_radar_long, \n           title = \"Gráfico de Radar Alternativo - Top 10 de Feid\",\n           pfcol = rep(\"black\", 10),\n           plwd = 2,\n           axistype = 1,\n           pcol = \"red\",\n           vlcex = 0.8,\n           cglcol = \"grey\",\n           cglty = 1,\n           cglwd = 0.5)\n#&gt; The number of variables must be 3 or more.\n#&gt; NULL\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n\n\n current session info \n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Madrid\n date     2023-12-14\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n cli           3.6.1      2023-03-23 [1] CRAN (R 4.3.0)\n clipr         0.8.0      2022-02-22 [1] CRAN (R 4.3.0)\n cluster     * 2.1.4      2022-08-22 [1] CRAN (R 4.3.1)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n commonmark    1.9.0      2023-03-17 [1] CRAN (R 4.3.0)\n corrplot    * 0.92       2021-11-18 [1] CRAN (R 4.3.0)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n crosstalk     1.2.0      2021-11-04 [1] CRAN (R 4.3.0)\n data.table    1.14.8     2023-02-17 [1] CRAN (R 4.3.0)\n desc          1.4.2      2022-09-08 [1] CRAN (R 4.3.0)\n details       0.3.0      2022-03-27 [1] CRAN (R 4.3.0)\n digest        0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n dplyr       * 1.1.3.9000 2023-11-11 [1] Github (tidyverse/dplyr@6b5aa31)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n evaluate      0.21       2023-05-05 [1] CRAN (R 4.3.0)\n fansi         1.0.5      2023-10-08 [1] CRAN (R 4.3.1)\n farver        2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n fmsb        * 0.7.5      2023-01-05 [1] CRAN (R 4.3.0)\n fontawesome   0.5.2      2023-08-19 [1] CRAN (R 4.3.0)\n forcats     * 1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n gganimate   * 1.0.8      2022-09-08 [1] CRAN (R 4.3.0)\n ggplot2     * 3.4.3      2023-08-14 [1] CRAN (R 4.3.0)\n ggrepel     * 0.9.4      2023-10-13 [1] CRAN (R 4.3.1)\n ggwordcloud * 0.6.1      2023-10-26 [1] CRAN (R 4.3.1)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n gridExtra   * 2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gridtext      0.1.5      2022-09-16 [1] CRAN (R 4.3.0)\n gt          * 0.9.0      2023-03-31 [1] CRAN (R 4.3.0)\n gtable        0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n gtExtras    * 0.5.0      2023-09-15 [1] CRAN (R 4.3.0)\n hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n htmltools     0.5.6      2023-08-10 [1] CRAN (R 4.3.0)\n htmlwidgets   1.6.2      2023-03-17 [1] CRAN (R 4.3.0)\n httr          1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n jsonlite      1.8.7      2023-06-29 [1] CRAN (R 4.3.0)\n knitr         1.43       2023-05-25 [1] CRAN (R 4.3.0)\n labeling      0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n lazyeval      0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.3.0)\n lubridate   * 1.9.2      2023-02-10 [1] CRAN (R 4.3.0)\n magick        2.8.1      2023-10-22 [1] CRAN (R 4.3.1)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n markdown      1.8        2023-08-23 [1] CRAN (R 4.3.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n paletteer     1.5.0      2022-10-19 [1] CRAN (R 4.3.0)\n pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n plotly      * 4.10.2     2023-06-03 [1] CRAN (R 4.3.0)\n plyr          1.8.8      2022-11-11 [1] CRAN (R 4.3.0)\n png         * 0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits   1.1.1      2020-01-24 [1] CRAN (R 4.3.0)\n progress      1.2.2      2019-05-16 [1] CRAN (R 4.3.0)\n purrr       * 1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n radarchart  * 0.3.1      2016-12-20 [1] CRAN (R 4.3.0)\n Rcpp          1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n readr       * 2.1.4      2023-02-10 [1] CRAN (R 4.3.0)\n rematch2      2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n reshape2    * 1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n rlang         1.1.1      2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown     2.24       2023-08-14 [1] CRAN (R 4.3.0)\n rprojroot     2.0.3      2022-04-02 [1] CRAN (R 4.3.0)\n rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n sass          0.4.7      2023-07-15 [1] CRAN (R 4.3.0)\n scales        1.2.1      2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.3.0)\n stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.3.0)\n tibble      * 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr       * 1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse   * 2.0.0      2023-02-22 [1] CRAN (R 4.3.0)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.3.0)\n tweenr        2.0.2      2022-09-06 [1] CRAN (R 4.3.0)\n tzdb          0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n utf8          1.2.4      2023-10-22 [1] CRAN (R 4.3.1)\n vctrs         0.6.4      2023-10-12 [1] CRAN (R 4.3.1)\n viridisLite   0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n withr         2.5.2      2023-10-30 [1] CRAN (R 4.3.1)\n xfun          0.40       2023-08-09 [1] CRAN (R 4.3.0)\n xml2          1.3.5      2023-07-06 [1] CRAN (R 4.3.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "my_trabajo_BigData.html#comparación-de-popularidad-en-spotify-y-apple-music",
    "href": "my_trabajo_BigData.html#comparación-de-popularidad-en-spotify-y-apple-music",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Comparación de popularidad en Spotify y Apple Music",
    "text": "Comparación de popularidad en Spotify y Apple Music\nExaminamos la popularidad de las canciones de Feid en Spotify y Apple Music a través de un gráfico interactivo. Este análisis incluye la presencia en playlists de ambas plataformas, ofreciendo una visión personalizada de cómo las canciones de Ferxxo se posicionan en el mundo de la música en la era digital. Al contrario que en la primera parte del trabajo, se prescinde de Deezer para ver de forma más fácil la comparación.\n\nObjetivo: Comparar la popularidad de las canciones de Feid en Spotify y Apple Music.\nMétodo: Uso de gráficos de barras para visualizar la presencia en playlists de ambas plataformas.\n\n\n\nCódigo\n# Normalizamos las columnas de apariciones en listas de reproducción\nnormalize &lt;- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\nnewtop &lt;- top_10_feid %&gt;%\n  select(Cancion, in_spotify_playlists, in_apple_playlists) %&gt;%\n  mutate(\n    in_spotify_playlists_norm = normalize(in_spotify_playlists),\n    in_apple_playlists_norm = normalize(in_apple_playlists)\n  ) %&gt;%\n  filter(!is.na(in_spotify_playlists_norm) | !is.na(in_apple_playlists_norm))\n\n# Creamos el gráfico ggplot con barras horizontales\ncomp_playlist &lt;- ggplot(newtop, aes(y = factor(Cancion))) +\n  geom_bar(aes(x = in_spotify_playlists_norm, fill = \"Spotify\"), stat = \"identity\", position = \"dodge\") +\n  geom_bar(aes(x = in_apple_playlists_norm, fill = \"Apple Music\"), stat = \"identity\", position = \"dodge\", alpha = 0.5) +\n  labs(title = \"Popularidad normalizada por canción en Spotify y Apple Music\",\n       x = \"Playlists normalizadas\",\n       y = \"Canción\") +\n  scale_fill_manual(values = c(\"Spotify\" = \"#1DB954\", \"Apple Music\" = \"#FF2F54\")) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(angle = 0, hjust = 1))  \n\n# Para hacerlo interactivo:\ncomp_plotly &lt;- ggplotly(comp_playlist)\ncomp_plotly\n\n\n\n\n\n\n\nDescubriendo colaboradores musicales en las canciones de Feid\nEn esta sección, nos sumergimos en la exploración visual de los colaboradores que han dejado su huella en las canciones de Ferxxo. A través de un intrigante Word Cloud, cada palabra representa a un artista colaborador, y en diferentes colores. Esta representación gráfica nos brinda una visión única y artística de las conexiones que Ferxxo ha cultivado en su viaje musical.\n\nObjetivo: Investigar las colaboraciones musicales en las canciones de Feid.\nMétodo: Creación de un Word Cloud para representar visualmente a los artistas colaboradores.\n\n\n\nCódigo\n# Creamos un nuevo df de artistas colaboradores y eliminamos a Feid de estos:\ndf_colab &lt;- df_feid %&gt;%\n  select(artist.s._name) %&gt;%\n  mutate(artist.s._name = gsub(\"Feid\", \"\", artist.s._name)) %&gt;%\n  filter(!is.na(artist.s._name)) %&gt;%\n  separate_rows(artist.s._name, sep = \",\")%&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  distinct() %&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  mutate(artist.s._name = str_trim(artist.s._name)) %&gt;%\n  filter(artist.s._name != \"\")%&gt;%\n  rename(\n    \"Colaboradores\" = artist.s._name)\n\nset.seed(42)\n\n# Creamos el word cloud de los colaboradores:\nggplot(df_colab, aes(label = Colaboradores, color = Colaboradores, size = runif(nrow(df_colab)))) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 30) + \n  theme_minimal()"
  },
  {
    "objectID": "my_trabajo_BigData.html#conclusión-de-tendencias-universales-a-las-notas-únicas-de-feid",
    "href": "my_trabajo_BigData.html#conclusión-de-tendencias-universales-a-las-notas-únicas-de-feid",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Conclusión: De tendencias universales a las notas únicas de Feid",
    "text": "Conclusión: De tendencias universales a las notas únicas de Feid\nEn la era digital, la música encuentra su voz en nuevas frecuencias. En este trabajo hemos explorado, en primer lugar, la distribución global de reproducciones, las dinámicas estacionales, la influencia del éxito en las colaboraciones y, sobre todo, qué pueden decirnos características asignadas por Spotify a las canciones, tanto en su propio éxito medido en reproducciones, como su clasificación por similitud a través de clusters.\nPosteriormente nos hemos sumergido en el universo sonoro distintivo de Ferxxo, desde sus éxitos envolventes hasta las colaboraciones tejidas en su trayectoria. Su arte, distintivo y cautivador, añade una vibración única a la melodía global, destacando la capacidad de la música para ser universal y personal al mismo tiempo. Y como en nuestros datos no lo tenemos porque es muy reciente, compartimos por aquí una de las canciones que más esta sonando últimamente:"
  },
  {
    "objectID": "my_trabajo_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023.",
    "href": "my_trabajo_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023.",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023.",
    "text": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023.\n\nAnálisis global de canciones y número de reproducciones.\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n#Creamos el histograma:\nggplot(df, aes(x = streams)) +\n  geom_histogram(bins = 60, fill = \"skyblue\", color = \"black\") +\n  scale_x_log10(breaks = scales::trans_breaks(\"log10\", function(x) 10^x),\n                labels = scales::trans_format(\"log10\", scales::math_format(10^.x))) +\n  theme_minimal() +\n  labs(title = \"Distribución de reproducciones de canciones\",\n       x = \"Reproducciones (escala logarítmica)\",\n       y = \"Frecuencia\")\n\n\n\n\n\n\n\n\n\n\n\nIniciamos el proyecto con un análisis detallado de la distribución de reproducciones entre las canciones, empleando un histograma transformado logarítmicamente. Este enfoque no solo aclara la distribución de las reproducciones entre un gran número de canciones populares, sino que también resalta las tendencias generales y los patrones de popularidad. Este análisis es crucial para entender la dinámica del éxito en plataformas de streaming musical y para identificar qué nivel de reproducciones es común entre las canciones más populares.\n\nObjetivo: Analizar cómo se distribuyen las reproducciones entre las canciones populares.\nMétodo: Utilización de un histograma transformado logarítmicamente para una representación clara y detallada de la distribución de las reproducciones.\n\n\n\nEste histograma nos permite agrupar las canciones al dividir las reproducciones hasta en 60 veces. De esta manera, es posible apreciar con qué frecuencia aparecen canciones en el TOP 1000 que tengan un número determinado de reproducciones. A pesar de ser un base de datos caracterizada por la popularidad, dentro de esta exposición existen diferencias de reproducciones, como puede observarse con la forma de campana de Gauss que ofrece le histograma.\n\n\n\n\n\nPopularidad de canciones por mes de lanzamiento\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n# Convertimos \"released_month\" a factor con etiquetas de mes para poder trabajarlo en el gráfico de barras\ndf$released_month &lt;- factor(df$released_month, levels = 1:12, labels = month.abb)\n\n# Creamos el gráfico de barras para las canciones más populares por mes de lanzamiento\nggplot(df, aes(x = released_month)) +\n  geom_bar(fill = \"green\") + \n  theme_minimal() +\n  labs(title = \"Canciones populares por mes de lanzamiento\",\n       x = \"Mes de lanzamiento\",\n       y = \"Número de canciones populares\")\n\n\n\n\n\n\n\n\n\n\n\nInvestigamos también factores como el mes de lanzamiento de las canciones y su influencia en la popularidad. Mediante gráficos de barras analizamos qué meses en particular recogen la mayor cantidad de éxitos, pudiendo entrever estrategias de marketing y tendencias de consumo.\n\nObjetivo: Investigar si el mes de lanzamiento influye en la popularidad de las canciones.\nMétodo: Creación de un gráfico de barras para mostrar la cantidad de canciones populares lanzadas cada mes.\n\n\n\nCon este gráfico de barras observamos que los meses de lanzamiento que aglutinan las canciones más populares son los meses de enero y mayo. Esta agrupación destacada evidencia una concentración de canciones alrededor de dos meses que, con toda seguridad, han sido seleccionados de manera previa por las discográficas para generar un impacto superior debido a eventos y tendencias concretas que se desarrollan en el sector musical.\n\n\n\n\n\nNúmero de reproducciones por cantidad de artistas participantes\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n#Creamos el gráfico de dispersión\nggplot(df, aes(x = artist_count, y = as.numeric(streams))) +\n  geom_point(aes(color = artist_count), alpha = 0.6) +\n  scale_y_log10() +\n  theme_minimal() +\n  scale_color_continuous(name = \"Número de artistas\") +\n  labs(title = \"Número de artistas vs Reproducciones\",\n       x = \"Número de artistas\",\n       y = \"Reproducciones\")\n\n\n\n\n\n\n\n\n\n\n\nDel mismo modo, tratamos de encontrar alguna relación o tendencia entre las canciones con mayores reproducciones con la cantidad de artistas que participan en cada una de ellas.\n\nObjetivo: Explorar la relación entre el número de artistas en una canción y su éxito en términos de reproducciones.\nMétodo: Uso de un gráfico de dispersión para visualizar esta relación, con una transformación logarítmica en el eje de las reproducciones.\n\n\n\nEste gráfico de dispersión deja muy a las claras que los mayores éxitos en cuanto a cantidad de ellos mismos se produce con un solo artista como protagonista, siendo este un resultado esperado. Sin embargo, al mismo tiempo, también vemos que los temas musicales lanzados por una sola persona son los que mayor cantidad de reproducciones ofrecen. No existe un dato extremo o “outlier” que supere a los temas populares protagonizados por un artista en solitario.\n\n\n\n\n\nRelación entre características musicales y rango de popularidad por cuartiles\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n# Definimos los cuartiles de reproducciones\ncuartile_breaks &lt;- quantile(df$streams, probs = seq(0, 1, by = 0.25))\n\n# Creamos una nueva columna en el dataframe para indicar el grupo de cuartil\ndf$stream_cuartile_group &lt;- cut(df$streams, \n                                breaks = cuartile_breaks, \n                                include.lowest = TRUE, \n                                labels = c(\"0-25%\", \"25-50%\", \"50-75%\", \"75-100%\"))\n\n\n#Transformamos el dataframe para visualización\ndf_melted &lt;- melt(df, id.vars = \"stream_cuartile_group\", measure.vars = c(\"danceability_.\", \"energy_.\", \"valence_.\"))\n\n# Creamos el gráfico de caja\nggplot(df_melted, aes(x = variable, y = value, fill = stream_cuartile_group)) +\n  geom_boxplot() +\n  scale_x_discrete(labels = c(\"Bailabilidad\", \"Energía\", \"Positividad\")) +\n  theme_minimal() +\n  labs(title = \"Características musicales por cuartiles de reproducciones\",\n       x = \"Característica\",\n       fill = \"Cuartiles\",\n       y = \"Valor\") +\n  facet_wrap(~stream_cuartile_group, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\n\nUna parte significativa del estudio la dedicamos a explorar de qué forma características específicas de las canciones como la “bailabilidad”, la “energía” y la “positividad” se correlacionan con su éxito en términos de reproducciones. Al dividir las canciones en cuartiles según su número de reproducciones, es posible destacar utilizando gráficos de caja y comparar las distribuciones de estas características musicales dentro de cada cuartil. Este análisis detallado proporciona información sobre qué atributos musicales son más importantes en las canciones de mayor éxito.\n\nObjetivo: Examinar la relación entre la popularidad de las canciones (medida en reproducciones) y sus características musicales (“bailabilidad”, “energía”, “positividad”).\nMétodo: Clasificación de las canciones en cuartiles según sus reproducciones y posterior análisis de las características musicales para cada cuartil mediante gráficos de caja.\n\n\n\nLos resultados de estos gráficos de cajas son sorprendentes. Curiosamente, el cuartil donde se aglutinan las canciones más popualres (es decir, el grupo de 75%-100%) es el que dispone el rango de “positividad” más bajo, tanto en su máximo como en su mínimo. Los valores de “bailabilidad” y “energía” también son sensiblemente inferiores. Esta situación puede deberse a las tendencias musicales actuales.\n\n\n\n\n\nAnálisis de la correlación entre características musicales y presencia en listas de reproducción\n\nGráficosMetodologíaResultado\n\n\n\n\nCódigo\n# Creamos los gráficos para mostrar las diferencias...\n\n# Función para normalizar los datos\nnormalize &lt;- function(x) {\n  (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))\n}\n\n# Normalizamos las columnas de apariciones en listas de reproducción\ndf &lt;- df %&gt;%\n  mutate(in_spotify_playlists_norm = normalize(in_spotify_playlists),\n         in_apple_playlists_norm = normalize(in_apple_playlists),\n         in_deezer_playlists_norm = normalize(in_deezer_playlists))\n\n# Eliminamos filas con valores NA en las columnas relevantes\ndf_clean &lt;- df %&gt;%\n  filter(!is.na(danceability_.) & \n           !is.na(in_spotify_playlists_norm) & \n           !is.na(in_apple_playlists_norm) & \n           !is.na(in_deezer_playlists_norm))\n\n# Bailabilidad\n# Gráfico Spotify\np1 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Bailabilidad vs Apariciones normalizadas en listas de reproducción\",\n       x = \"Bailabilidad (%)\",\n       y = \"Apariciones normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico Apple Music\np2 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(x = \"Bailabilidad (%)\",\n       y = \"Apariciones normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico Deezer\np3 &lt;- ggplot(df_clean, aes(x = danceability_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(x = \"Bailabilidad (%)\",\n       y = \"Apariciones normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinamos los gráficos\ncombined_plot &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n# Mostramos el gráfico combinado\ncombined_plot\n\n# Energía\n# Gráfico Spotify\np1 &lt;- ggplot(df_clean, aes(x = energy_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Energía vs Apariciones normalizadas en listas de reproducción\",\n       x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico Apple Music\np2 &lt;- ggplot(df_clean, aes(x = energy_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico Deezer\np3 &lt;- ggplot(df_clean, aes(x = energy_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(x = \"Energía (%)\",\n       y = \"Apariciones normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinamos los gráficos\ncombined_plot1 &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n\n# Mostramos el gráfico combinado\ncombined_plot1\n\n\n# Positividad\n# Gráfico Spotify\np1 &lt;- ggplot(df_clean, aes(x = valence_., y = in_spotify_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"blue\") +\n  labs(title = \"Positividad vs Apariciones normalizadas en listas de reproducción\",\n       x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Spotify\") +\n  theme_minimal()\n\n# Gráfico Apple Music\np2 &lt;- ggplot(df_clean, aes(x = valence_., y = in_apple_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"red\") +\n  labs(x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Apple Music\") +\n  theme_minimal()\n\n# Gráfico Deezer\np3 &lt;- ggplot(df_clean, aes(x = valence_., y = in_deezer_playlists_norm)) +\n  geom_point(alpha = 0.5, color = \"green\") +\n  labs(x = \"Positividad (%)\",\n       y = \"Apariciones normalizadas en Deezer\") +\n  theme_minimal()\n\n# Combinamos los gráficos\ncombined_plot2 &lt;- p1 + p2 + p3 + plot_layout(guides = 'collect')\n\n# Mostramos el gráfico combinado\ncombined_plot2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn este caso buscamos averiguar si las características musicales específicas —bailabilidad, energía y positividad— de las canciones se correlacionan con su presencia en listas de reproducción en distintas plataformas de streaming musical (Spotify, Apple Music y Deezer).\n\nObjetivo: El análisis busca identificar si ciertas características musicales están más asociadas con una mayor inclusión en listas de reproducción en cada plataforma.\nMétodo: Normalización de los datos para una correcta comparación y gráficas de dispersión para una mejor visualización.\n\n\n\nEstos gráficos de dispersión no han arrojado una gran diferenciación entre el perfil de los usuarios que añaden canciones a sus playlist particulares. La mayor diferencia a simple vista es la de Deezer, pero esta situación puede deberse a que el funcionamiento de la plataforma no fomenta tanto la creación de playlist en comparación con Spotify y Apple Music.\n\n\n\n\n\nAnálisis de canciones por clusters\n\nGráficoMetodologíaResultado\n\n\n\n\nCódigo\n# Análizamos los clusters utilizando k-means\nset.seed(123)  # Esto sirve para la reproductibilidad\nkmeans_result &lt;- kmeans(df[, c(\"danceability_.\", \"energy_.\", \"valence_.\")], centers = 4)\n\n# Añadimos la asignación de clusters al dataframe\ndf$cluster &lt;- as.factor(kmeans_result$cluster)\n\n# Creamos una nueva columna para nombres de cluster personalizados\ndf$cluster_name &lt;- paste(\"Cluster\", df$cluster)\n\n#Gráfico de canciones por clusters\nplot_ly(df, x = ~danceability_., y = ~energy_., z = ~valence_., \n        color = ~cluster_name, text = ~track_name_clean, \n        colors = c('red', 'blue', 'green', 'yellow'),\n        marker = list(size = 10), type = 'scatter3d', mode = 'markers') %&gt;%\n  layout(title = \"Análisis de clusters de canciones\",\n         scene = list(xaxis = list(title = 'Bailabilidad'),\n                      yaxis = list(title = 'Energía'),\n                      zaxis = list(title = 'Positividad')))\n\n\n\n\n\n\n\n\nPor último, uno de los aspectos más importantes del trabajo ha sido poder agrupar las canciones más populares por clusters. Estos clusters tienen en cuenta las tres características cualitativas de las canciones para Spotify, como son la “bailabilidad”, la “energía” y la “positividad”. Esta clasificación sirve para encontrar canciones con elementos comunes y así poder concretar con mayor precisión qué elementos son necesarios para que un tema musical pueda llegar a ser extremadamente popular.\nObjetivo: Agrupar canciones con características similares y analizar estos grupos.\nMétodo: Uso del algoritmo k-means para clasificar las canciones en clusters según características musicales, así como visualización mediante un gráfico 3D.\n\n\nMás que sacar conclusiones, este gráfico, usando el algoritmo kmeans, nos permite agrupar canciones por las variables “bailabilidad”, “energía” y “positivdad” y trazar así una relación entre todas ellas. Esta información por clusters puede ser muy útil como investigación de qué elementos debe tener una canción para ser de éxito y, al mismo tiempo, cómo debe ser en términos musicales si se quiere encuadrar dentro de un grupo determinado. Con herramientas de inteligencia artificial, esta información podría ser útil para crear canciones usando como modelos los temas de cada cluster."
  },
  {
    "objectID": "my_slides_BigData.html",
    "href": "my_slides_BigData.html",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "",
    "text": "Objetivo: Analizar cómo se distribuyen las reproducciones entre las canciones populares.\nMétodo: Utilización de un histograma transformado logarítmicamente para una representación clara y detallada de la distribución de las reproducciones.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Investigar si el mes de lanzamiento influye en la popularidad de las canciones.\nMétodo: Creación de un gráfico de barras para mostrar la cantidad de canciones populares lanzadas cada mes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Explorar la relación entre el número de artistas en una canción y su éxito en términos de reproducciones.\nMétodo: Uso de un gráfico de dispersión para visualizar esta relación, con una transformación logarítmica en el eje de las reproducciones.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Examinar la relación entre la popularidad de las canciones (medida en reproducciones) y sus características musicales (“bailabilidad”, “energía”, “positividad”).\nMétodo: Clasificación de las canciones en cuartiles según sus reproducciones y posterior análisis de las características musicales para cada cuartil mediante gráficos de caja.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: El análisis busca identificar si ciertas características musicales están más asociadas con una mayor inclusión en listas de reproducción en cada paltaforma.\nMétodo: Normalización de los datos para una correcta comparación y gráficas de dispersión para una mejor visualización.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Agrupar canciones con características similares y analizar estos grupos.\nMétodo: Uso del algoritmo k-means para clasificar las canciones en clusters según características musicales, así como visualización mediante un gráfico 3D."
  },
  {
    "objectID": "my_slides_BigData.html#análisis-global-de-canciones-y-número-de-reproducciones.",
    "href": "my_slides_BigData.html#análisis-global-de-canciones-y-número-de-reproducciones.",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Análisis global de canciones y número de reproducciones.",
    "text": "Análisis global de canciones y número de reproducciones.\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Analizar cómo se distribuyen las reproducciones entre las canciones populares.\nMétodo: Utilización de un histograma transformado logarítmicamente para una representación clara y detallada de la distribución de las reproducciones.\n\n\n\nEste histograma nos permite agrupar las canciones al dividir las reproducciones hasta en 60 veces. De esta manera, es posible apreciar con qué frecuencia aparecen canciones en el TOP 1000 que tengan un número determinado de reproducciones. A pesar de ser un base de datos caracterizada por la popularidad, dentro de esta exposición existen diferencias de reproducciones, como puede observarse con la forma de campana de Gauss que ofrece le histograma."
  },
  {
    "objectID": "my_slides_BigData.html#popularidad-de-canciones-por-mes-de-lanzamiento",
    "href": "my_slides_BigData.html#popularidad-de-canciones-por-mes-de-lanzamiento",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Popularidad de canciones por mes de lanzamiento",
    "text": "Popularidad de canciones por mes de lanzamiento\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvestigamos también factores como el mes de lanzamiento de las canciones y su influencia en la popularidad. Mediante gráficos de barras analizamos qué meses en particular recogen la mayor cantidad de éxitos, pudiendo entrever estrategias de marketing y tendencias de consumo.\n\nObjetivo: Investigar si el mes de lanzamiento influye en la popularidad de las canciones.\nMétodo: Creación de un gráfico de barras para mostrar la cantidad de canciones populares lanzadas cada mes.\n\n\n\nCon este gráfico de barras observamos que los meses de lanzamiento que aglutinan las canciones más populares son los meses de enero y mayo. Esta agrupación destacada evidencia una concentración de canciones alrededor de dos meses que, con toda seguridad, han sido seleccionados de manera previa por las discográficas para generar un impacto superior debido a eventos y tendencias concretas que se desarrollan en el sector musical."
  },
  {
    "objectID": "my_slides_BigData.html#número-de-reproducciones-por-cantidad-de-artistas-participantes",
    "href": "my_slides_BigData.html#número-de-reproducciones-por-cantidad-de-artistas-participantes",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Número de reproducciones por cantidad de artistas participantes",
    "text": "Número de reproducciones por cantidad de artistas participantes\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObjetivo: Explorar la relación entre el número de artistas en una canción y su éxito en términos de reproducciones.\nMétodo: Uso de un gráfico de dispersión para visualizar esta relación, con una transformación logarítmica en el eje de las reproducciones.\n\n\n\nEste gráfico de dispersión deja muy a las claras que los mayores éxitos en cuanto a cantidad de ellos mismos se produce con un solo artista como protagonista, siendo este un resultado esperado. Sin embargo, al mismo tiempo, también vemos que los temas musicales lanzados por una sola persona son los que mayor cantidad de reproducciones ofrecen. No existe un dato extremo o “outlier” que supere a los temas populares protagonizados por un artista en solitario."
  },
  {
    "objectID": "my_slides_BigData.html#relación-entre-características-musicales-y-rango-de-popularidad-por-cuartiles",
    "href": "my_slides_BigData.html#relación-entre-características-musicales-y-rango-de-popularidad-por-cuartiles",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Relación entre características musicales y rango de popularidad por cuartiles",
    "text": "Relación entre características musicales y rango de popularidad por cuartiles\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\n\n\n\nUna parte significativa del estudio la dedicamos a explorar de qué forma características específicas de las canciones como la “bailabilidad”, la “energía” y la “positividad” se correlacionan con su éxito en términos de reproducciones. Al dividir las canciones en cuartiles según su número de reproducciones, es posible destacar utilizando gráficos de caja y comparar las distribuciones de estas características musicales dentro de cada cuartil. Este análisis detallado proporciona información sobre qué atributos musicales son más importantes en las canciones de mayor éxito.\n\nObjetivo: Examinar la relación entre la popularidad de las canciones (medida en reproducciones) y sus características musicales (“bailabilidad”, “energía”, “positividad”).\nMétodo: Clasificación de las canciones en cuartiles según sus reproducciones y posterior análisis de las características musicales para cada cuartil mediante gráficos de caja.\n\n\n\nLos resultados de estos gráficos de cajas son sorprendentes. Curiosamente, el cuartil donde se aglutinan las canciones más popualres (es decir, el grupo de 75%-100%) es el que dispone el rango de “positividad” más bajo, tanto en su máximo como en su mínimo. Los valores de “bailabilidad” y “energía” también son sensiblemente inferiores. Esta situación puede deberse a las tendencias musicales actuales."
  },
  {
    "objectID": "my_slides_BigData.html#análisis-de-la-correlación-entre-características-musicales-y-presencia-en-listas-de-reproducción",
    "href": "my_slides_BigData.html#análisis-de-la-correlación-entre-características-musicales-y-presencia-en-listas-de-reproducción",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Análisis de la correlación entre características musicales y presencia en listas de reproducción",
    "text": "Análisis de la correlación entre características musicales y presencia en listas de reproducción\n\nGráfico 1:Gráfico 2:Gráfico 3:MetodologíaResultado\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn este caso buscamos averiguar si las características musicales específicas —bailabilidad, energía y positividad— de las canciones se correlacionan con su presencia en listas de reproducción en distintas plataformas de streaming musical (Spotify, Apple Music y Deezer).\n\nObjetivo: El análisis busca identificar si ciertas características musicales están más asociadas con una mayor inclusión en listas de reproducción en cada plataforma.\nMétodo: Normalización de los datos para una correcta comparación y gráficas de dispersión para una mejor visualización.\n\n\n\nEstos gráficos de dispersión no han arrojado una gran diferenciación entre el perfil de los usuarios que añaden canciones a sus playlist particulares. La mayor diferencia a simple vista es la de Deezer, pero esta situación puede deberse a que el funcionamiento de la plataforma no fomenta tanto la creación de playlist en comparación con Spotify y Apple Music."
  },
  {
    "objectID": "my_slides_BigData.html#análisis-de-canciones-por-clusters",
    "href": "my_slides_BigData.html#análisis-de-canciones-por-clusters",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Análisis de canciones por clusters",
    "text": "Análisis de canciones por clusters\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\nPor último, uno de los aspectos más importantes del trabajo ha sido poder agrupar las canciones más populares por clusters. Estos clusters tienen en cuenta las tres características cualitativas de las canciones para Spotify, como son la “bailabilidad”, la “energía” y la “positividad”. Esta clasificación sirve para encontrar canciones con elementos comunes y así poder concretar con mayor precisión qué elementos son necesarios para que un tema musical pueda llegar a ser extremadamente popular.\nObjetivo: Agrupar canciones con características similares y analizar estos grupos.\nMétodo: Uso del algoritmo k-means para clasificar las canciones en clusters según características musicales, así como visualización mediante un gráfico 3D.\n\n\nMás que sacar conclusiones, este gráfico, usando el algoritmo kmeans, nos permite agrupar canciones por las variables “bailabilidad”, “energía” y “positivdad” y trazar así una relación entre todas ellas. Esta información por clusters puede ser muy útil como investigación de qué elementos debe tener una canción para ser de éxito y, al mismo tiempo, cómo debe ser en términos musicales si se quiere encuadrar dentro de un grupo determinado. Con herramientas de inteligencia artificial, esta información podría ser útil para crear canciones usando como modelos los temas de cada cluster."
  },
  {
    "objectID": "my_slides_BigData.html#biografia-del-artista",
    "href": "my_slides_BigData.html#biografia-del-artista",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Biografia del artista",
    "text": "Biografia del artista\nSalomón Villada Hoyos (Medellín, 19 de agosto de 1992), mejor conocido por su nombre artístico Feid o por su alter ego Ferxxo, es un cantante, compositor y productor discográfico colombiano.\nCon una energía positiva, muy buen rollo y colaboraciones junto a varios artistas, Feid nos trae la banda sonora urbana del 2023.\n\nFeid"
  },
  {
    "objectID": "my_slides_BigData.html#análisis-de-distribución-de-canciones-por-artista",
    "href": "my_slides_BigData.html#análisis-de-distribución-de-canciones-por-artista",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Análisis de distribución de canciones por artista",
    "text": "Análisis de distribución de canciones por artista\n\nGráfico 1Gráfico 2MetodologíaResultados\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdentrándonos en el análisis de la distribución de canciones por artista, destacamos la proporción de canciones de Ferxxo en comparación con otros artistas entre las canciones más populares de 2023. Utilizamos un gráfico circular para ilustrar de forma clara y sencilla la diversidad artística.\n\nObjetivo: Examinar cómo se distribuyen las canciones entre Feid y otros artistas.\nMétodo: Uso de gráficos circulares para visualizar la proporción de canciones de Feid en comparación con otros artistas.\n\n\n\nCon los gráficos circulares, podemos observar la significativa presencia de Ferxxo en el panorama musical de 2023. Esto nos sugiere que se encuentra entre las preferencias de los oyentes."
  },
  {
    "objectID": "my_slides_BigData.html#éxitos-en-el-top-10-las-10-canciones-más-escuchadas-de-ferxxo-en-2023",
    "href": "my_slides_BigData.html#éxitos-en-el-top-10-las-10-canciones-más-escuchadas-de-ferxxo-en-2023",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Éxitos en el TOP 10: Las 10 canciones más escuchadas de Ferxxo en 2023",
    "text": "Éxitos en el TOP 10: Las 10 canciones más escuchadas de Ferxxo en 2023\n\nTablaMetodologíaResultado\n\n\n\n\n\n\n\n\n  \n    \n      TOP 10 FEID\n    \n    \n      Canciones más escuchadas\n    \n    \n      \n      🔄 Reproducciones\n      💃 Bailabilidad\n      😃️Positividad\n      ⚡️ Energia\n      🎸 Acustica\n      🔊 Viveza\n    \n  \n  \n    Hey Mor - Ozuna, Feid\n674072710\n90\n40\n59\n0\n10\n    Feliz Cumpleaños Ferxxo - Feid\n601863821\n87\n57\n55\n10\n29\n    Yandel 150 - Yandel, Feid\n585695368\n78\n58\n73\n5\n10\n    LA INOCENTE - Feid, Mora\n477033549\n76\n46\n79\n31\n7\n    Normal - Feid\n459276435\n71\n59\n56\n4\n27\n    CHORRITO PA LAS ANIMAS - Feid\n345031710\n74\n61\n83\n11\n35\n    Classy 101 - Feid, Young Miko\n335222234\n86\n67\n66\n14\n12\n    ULTRA SOLO REMIX - De La Ghetto, Feid, Polima WestCoast, Paloma Mami, Pailita\n279717388\n91\n59\n82\n8\n6\n    Ferxxo 100 - Feid\n278920007\n70\n58\n57\n25\n15\n    Pantysito - Feid, Alejo, Robi\n273005485\n83\n63\n74\n14\n16\n  \n  \n  \n\n\n\n\n\n\nA continuación, es posible descubrir los éxitos más destacados de Ferxxo mientras se filtran y se ordenan sus canciones según la cantidad de reproducciones. Esta tabla muestra las canciones más populares, abordando aspectos como reproducciones, bailabilidad, positividad, energía, acústica y viveza.\n\nObjetivo: Identificar las canciones más populares de Feid.\nMétodo: Ordenar las canciones de Feid por número de reproducciones y seleccionar las 10 principales.\n\n\n\nCon esta tabla, hemos querido reflejar las 10 canciones mejor acogidas por los oyentes, además de mostrar las características individuales de cada canción."
  },
  {
    "objectID": "my_slides_BigData.html#explorando-en-profundidad-las-características-del-top-10-de-ferxxo",
    "href": "my_slides_BigData.html#explorando-en-profundidad-las-características-del-top-10-de-ferxxo",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Explorando en profundidad las características del TOP 10 de Ferxxo",
    "text": "Explorando en profundidad las características del TOP 10 de Ferxxo\n\nObjetivo: Analizar en detalle las características musicales de las canciones más populares de Feid.\nMétodo: Creación de un gráfico de radar para visualizar las características como bailabilidad, positividad, energía, etc, asignando a cada canción un color."
  },
  {
    "objectID": "my_slides_BigData.html#viaje-a-través-de-las-características-individuales-de-nuestras-canciones-favori",
    "href": "my_slides_BigData.html#viaje-a-través-de-las-características-individuales-de-nuestras-canciones-favori",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Viaje a través de las características individuales de nuestras canciones favori",
    "text": "Viaje a través de las características individuales de nuestras canciones favori\n\nObjetivo: Con la representación individual de cada canción de Feid se pretende obtener una evaluación detallada de los atributos de sus canciones.\nMétodo: Se utiliza un gráfico de dispersión donde cada punto representa una canción."
  },
  {
    "objectID": "my_slides_BigData.html#comparación-de-popularidad-en-spotify-y-apple-music",
    "href": "my_slides_BigData.html#comparación-de-popularidad-en-spotify-y-apple-music",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Comparación de popularidad en Spotify y Apple Music",
    "text": "Comparación de popularidad en Spotify y Apple Music\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\nExaminamos la popularidad de las canciones de Feid en Spotify y Apple Music a través de un gráfico interactivo. Este análisis incluye la presencia en playlists de ambas plataformas, ofreciendo una visión personalizada de cómo las canciones de Ferxxo se posicionan en el mundo de la música en la era digital. Al contrario que en la primera parte del trabajo, se prescinde de Deezer para ver de forma más fácil la comparación.\n\nObjetivo: Comparar la popularidad de las canciones de Feid en Spotify y Apple Music.\nMétodo: Uso de gráficos de barras para visualizar la presencia en playlists de ambas plataformas.\n\n\n\nLa comparación de la popularidad en Spotify y Apple Music proporciona una visión valiosa de cómo las canciones de Ferxxo se posicionan en el ámbito digital. Al normalizar los datos, dado que cada plataforma difiere significativamente en el número de oyentes y la cantidad de playlists, podemos observar, por ejemplo, que “Yandel 150” destacó más en Spotify, mientras que “Normal” lo hizo en Apple Music."
  },
  {
    "objectID": "my_slides_BigData.html#descubriendo-colaboradores-musicales-en-las-canciones-de-feid",
    "href": "my_slides_BigData.html#descubriendo-colaboradores-musicales-en-las-canciones-de-feid",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Descubriendo colaboradores musicales en las canciones de Feid",
    "text": "Descubriendo colaboradores musicales en las canciones de Feid\n\nObjetivo: Investigar las colaboraciones musicales en las canciones de Feid.\nMétodo: Creación de un Word Cloud para representar visualmente a los artistas colaboradores."
  },
  {
    "objectID": "my_slides_BigData.html#conclusión-de-tendencias-universales-a-las-notas-únicas-de-feid",
    "href": "my_slides_BigData.html#conclusión-de-tendencias-universales-a-las-notas-únicas-de-feid",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Conclusión: De tendencias universales a las notas únicas de Feid",
    "text": "Conclusión: De tendencias universales a las notas únicas de Feid\nHemos explorado, en primer lugar, la distribución global de reproducciones, las dinámicas estacionales, la influencia del éxito en las colaboraciones y, sobre todo, qué pueden decirnos características asignadas por Spotify a las canciones, tanto en su propio éxito medido en reproducciones, como su clasificación por similitud a través de clusters.\nPosteriormente nos hemos sumergido en el universo sonoro distintivo de Ferxxo, desde sus éxitos envolventes hasta las colaboraciones tejidas en su trayectoria.Y como en nuestros datos no lo tenemos porque es muy reciente, compartimos por aquí una de las canciones que más esta sonando últimamente:\n\n\n\n\n\n\n\n\n\n\n\nSlides hechas con Quarto"
  },
  {
    "objectID": "my_slides_BigData.html#introducción",
    "href": "my_slides_BigData.html#introducción",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Introducción",
    "text": "Introducción\nNuestra presentación se divide en dos partes: primero, un análisis de las tendencias musicales de 2023 con datos de Spotify, destacando variables como “bailabilidad” y “energía”. Luego, nos enfocamos en el artista Feid, evaluando la popularidad y características musicales de sus canciones. El objetivo es comprender el comportamiento general y específico de las canciones, identificar coincidencias y descubrir tendencias en el panorama musical actual."
  },
  {
    "objectID": "my_slides_BigData.html#segunda-parte-ferxxo-en-el-foco.-aproximación-a-un-cantante-de-éxito",
    "href": "my_slides_BigData.html#segunda-parte-ferxxo-en-el-foco.-aproximación-a-un-cantante-de-éxito",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Segunda parte: Ferxxo en el foco. Aproximación a un cantante de éxito",
    "text": "Segunda parte: Ferxxo en el foco. Aproximación a un cantante de éxito"
  },
  {
    "objectID": "my_slides_BigData.html#viaje-a-través-de-las-características-individuales-de-nuestras-canciones-favoritas",
    "href": "my_slides_BigData.html#viaje-a-través-de-las-características-individuales-de-nuestras-canciones-favoritas",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Viaje a través de las características individuales de nuestras canciones favoritas",
    "text": "Viaje a través de las características individuales de nuestras canciones favoritas\n\nGráficoMetodologíaResultado\n\n\n\n\n\n\n\n\n\n\nExploramos de otra forma las características individuales de las canciones de Feid a través de gráficos de dispersión. Cada gráfico se centra en una característica única, desde la bailabilidad hasta la viveza, proporcionando una visión detallada y personalizada de la esencia musical de Ferxxo.\n\nObjetivo: Con la representación individual de cada canción de Feid se pretende obtener una evaluación detallada de los atributos de sus canciones.\nMétodo: Se utiliza un gráfico de dispersión donde cada punto representa una canción.\n\n\n\nCon esto buscamos otra manera de visualizar lo mismo, pero ahora de forma visual, detallada y personalizada."
  },
  {
    "objectID": "my_slides_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023.",
    "href": "my_slides_BigData.html#primera-parte-comportamiento-coincidencias-y-tendencias-de-las-canciones-más-populares-de-2023.",
    "title": "Hits Spotify 2023 y el caso de Feid",
    "section": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023.",
    "text": "Primera parte: Comportamiento, coincidencias y tendencias de las canciones más populares de 2023."
  }
]